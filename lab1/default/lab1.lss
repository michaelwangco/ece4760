
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b64  00000bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800104  00800104  00000bfc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000023a  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1d  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000269  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ef  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000289  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_12>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_16>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

0000008c <LcdCustomChar>:
  8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_initialize>:
  cc:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000dd <LCD_number>:
  dd:	43 61 70 3d 00 00 00                                Cap=...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d0 e4       	ldi	r29, 0x40	; 64
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	e4 e6       	ldi	r30, 0x64	; 100
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 30       	cpi	r26, 0x04	; 4
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a4 e0       	ldi	r26, 0x04	; 4
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	ae 31       	cpi	r26, 0x1E	; 30
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 a4 02 	call	0x548	; 0x548 <main>
 11e:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 126:	28 2f       	mov	r18, r24
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
 12c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 12e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 130:	24 ef       	ldi	r18, 0xF4	; 244
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 13a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	44 e0       	ldi	r20, 0x04	; 4
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	4a 95       	dec	r20
 14e:	e1 f7       	brne	.-8      	; 0x148 <LCDsendChar+0x22>
 150:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
 152:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 154:	42 9a       	sbi	0x08, 2	; 8
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 15c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 15e:	40 98       	cbi	0x08, 0	; 8
 160:	c9 01       	movw	r24, r18
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
 166:	08 95       	ret

00000168 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 168:	28 2f       	mov	r18, r24
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
 16e:	42 9a       	sbi	0x08, 2	; 8
 170:	24 ef       	ldi	r18, 0xF4	; 244
 172:	31 e0       	ldi	r19, 0x01	; 1
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 17a:	42 98       	cbi	0x08, 2	; 8
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCDsendCommand+0x1e>
 18e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	c9 01       	movw	r24, r18
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	c9 01       	movw	r24, r18
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
 1a0:	08 95       	ret

000001a2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1a8:	08 95       	ret

000001aa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1b0:	08 95       	ret

000001b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	49 f0       	breq	.+18     	; 0x1d2 <LCDstring+0x20>
 1c0:	ec 01       	movw	r28, r24
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1c6:	89 91       	ld	r24, Y+
 1c8:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
 1ce:	10 17       	cp	r17, r16
 1d0:	d0 f3       	brcs	.-12     	; 0x1c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1dc:	62 30       	cpi	r22, 0x02	; 2
 1de:	31 f0       	breq	.+12     	; 0x1ec <LCDGotoXY+0x10>
 1e0:	63 30       	cpi	r22, 0x03	; 3
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <LCDGotoXY+0x14>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1e8:	80 5c       	subi	r24, 0xC0	; 192
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ec:	8c 5e       	subi	r24, 0xEC	; 236
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1f0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
	
}
 1f8:	08 95       	ret

000001fa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 204:	64 2f       	mov	r22, r20
 206:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 20e:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 212:	1f 5f       	subi	r17, 0xFF	; 255
 214:	fe 01       	movw	r30, r28
 216:	e1 0f       	add	r30, r17
 218:	f1 1d       	adc	r31, r1
 21a:	84 91       	lpm	r24, Z+
 21c:	88 23       	and	r24, r24
 21e:	b9 f7       	brne	.-18     	; 0x20e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	7c 01       	movw	r14, r24
 236:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 238:	11 0f       	add	r17, r17
 23a:	11 0f       	add	r17, r17
 23c:	11 0f       	add	r17, r17
 23e:	10 64       	ori	r17, 0x40	; 64
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 244:	f7 01       	movw	r30, r14
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 24c:	81 2f       	mov	r24, r17
 24e:	8c 0f       	add	r24, r28
 250:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendChar(pcc);
 254:	80 2f       	mov	r24, r16
 256:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	c8 30       	cpi	r28, 0x08	; 8
 25e:	d1 05       	cpc	r29, r1
 260:	89 f7       	brne	.-30     	; 0x244 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	86 ea       	ldi	r24, 0xA6	; 166
 278:	9e e0       	ldi	r25, 0x0E	; 14
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 27e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
 280:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 282:	87 b1       	in	r24, 0x07	; 7
 284:	80 6f       	ori	r24, 0xF0	; 240
 286:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	87 60       	ori	r24, 0x07	; 7
 28c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 292:	42 9a       	sbi	0x08, 2	; 8
 294:	24 ef       	ldi	r18, 0xF4	; 244
 296:	31 e0       	ldi	r19, 0x01	; 1
 298:	f9 01       	movw	r30, r18
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 29e:	42 98       	cbi	0x08, 2	; 8
 2a0:	f9 01       	movw	r30, r18
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2a6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2a8:	42 9a       	sbi	0x08, 2	; 8
 2aa:	c9 01       	movw	r24, r18
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2b0:	42 98       	cbi	0x08, 2	; 8
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2bc:	42 9a       	sbi	0x08, 2	; 8
 2be:	c9 01       	movw	r24, r18
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2c4:	42 98       	cbi	0x08, 2	; 8
 2c6:	c9 01       	movw	r24, r18
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
 2d8:	cc e8       	ldi	r28, 0x8C	; 140
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2de:	16 2f       	mov	r17, r22
 2e0:	1f 5f       	subi	r17, 0xFF	; 255
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 14 01 	call	0x228	; 0x228 <LCDdefinechar>
 2e8:	28 96       	adiw	r28, 0x08	; 8
 2ea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2ec:	18 30       	cpi	r17, 0x08	; 8
 2ee:	b9 f7       	brne	.-18     	; 0x2de <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	08 2f       	mov	r16, r24
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	04 c0       	rjmp	.+8      	; 0x30a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	10 17       	cp	r17, r16
 30c:	d0 f3       	brcs	.-12     	; 0x302 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	08 2f       	mov	r16, r24
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	10 17       	cp	r17, r16
 328:	d0 f3       	brcs	.-12     	; 0x31e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 336:	08 95       	ret

00000338 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 33e:	08 95       	ret

00000340 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 346:	08 95       	ret

00000348 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 34e:	08 95       	ret

00000350 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 356:	08 95       	ret

00000358 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	08 2f       	mov	r16, r24
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	04 c0       	rjmp	.+8      	; 0x36a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 368:	1f 5f       	subi	r17, 0xFF	; 255
 36a:	10 17       	cp	r17, r16
 36c:	d0 f3       	brcs	.-12     	; 0x362 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	08 2f       	mov	r16, r24
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	04 c0       	rjmp	.+8      	; 0x386 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 37e:	84 e1       	ldi	r24, 0x14	; 20
 380:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 384:	1f 5f       	subi	r17, 0xFF	; 255
 386:	10 17       	cp	r17, r16
 388:	d0 f3       	brcs	.-12     	; 0x37e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3a0:	96 e0       	ldi	r25, 0x06	; 6
 3a2:	89 9f       	mul	r24, r25
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	24 2f       	mov	r18, r20
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	ac 01       	movw	r20, r24
 3ae:	42 9f       	mul	r20, r18
 3b0:	c0 01       	movw	r24, r0
 3b2:	43 9f       	mul	r20, r19
 3b4:	90 0d       	add	r25, r0
 3b6:	52 9f       	mul	r21, r18
 3b8:	90 0d       	add	r25, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 c6 02 	call	0x58c	; 0x58c <__divmodhi4>
 3c2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3c4:	cb 01       	movw	r24, r22
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 3ce:	e8 2e       	mov	r14, r24
 3d0:	ff 24       	eor	r15, r15
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3d8:	c8 01       	movw	r24, r16
 3da:	05 96       	adiw	r24, 0x05	; 5
 3dc:	c8 17       	cp	r28, r24
 3de:	d9 07       	cpc	r29, r25
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <LCDprogressBar+0x56>
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3e6:	c0 17       	cp	r28, r16
 3e8:	d1 07       	cpc	r29, r17
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <LCDprogressBar+0x60>
 3ec:	8e 2d       	mov	r24, r14
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCDprogressBar+0x62>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3f2:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3f6:	f3 94       	inc	r15
 3f8:	0a 5f       	subi	r16, 0xFA	; 250
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	fd 14       	cp	r15, r13
 3fe:	60 f3       	brcs	.-40     	; 0x3d8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	08 95       	ret

00000410 <__vector_16>:
	CopyStringtoLCD(LCD_initialize, 0, 0);
}	

//Timer 0 overflow ISR
ISR (TIMER0_COMPA_vect) 
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	8f 93       	push	r24
  if (time1>0)	--time1;
 41c:	80 91 16 01 	lds	r24, 0x0116
 420:	88 23       	and	r24, r24
 422:	29 f0       	breq	.+10     	; 0x42e <__vector_16+0x1e>
 424:	80 91 16 01 	lds	r24, 0x0116
 428:	81 50       	subi	r24, 0x01	; 1
 42a:	80 93 16 01 	sts	0x0116, r24
}
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_12>:
//Timer 1 capture ISR
ISR (TIMER1_CAPT_vect) 
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
	T1capture = ICR1;
 448:	80 91 86 00 	lds	r24, 0x0086
 44c:	90 91 87 00 	lds	r25, 0x0087
 450:	90 93 18 01 	sts	0x0118, r25
 454:	80 93 17 01 	sts	0x0117, r24

} 
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <init_lcd>:
	LCDclr();
}

void init_lcd(void) 
{
	LCDinit();	//initialize the display
 466:	0e 94 38 01 	call	0x270	; 0x270 <LCDinit>
	LCDcursorOFF();
 46a:	0e 94 a0 01 	call	0x340	; 0x340 <LCDcursorOFF>
	LCDclr();				//clear the display
 46e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>
	LCDGotoXY(0,0);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
 47a:	8c ec       	ldi	r24, 0xCC	; 204
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>
}	
 486:	08 95       	ret

00000488 <initialize>:

	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
}
void initialize(void) 
{
	TCCR0A = (1<<WGM01);	          // Set WGM bits to 010 to set desired mode (CTC mode, pg. 106)
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // Bits 0 and 1. Set timer 0 prescaler to 64
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); 		  // Bit 1: Enable compare match for timer0 interrupts
 490:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;				  // Set the compare register to 250 time ticks
 494:	89 ef       	ldi	r24, 0xF9	; 249
 496:	87 bd       	out	0x27, r24	; 39
	
	// Set up timer1 for full speed
	TCCR1B = (1<<ICES1)|(1<<CS00);  // Set capture to positive edge, and set timer1 for full speed
 498:	81 e4       	ldi	r24, 0x41	; 65
 49a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<ICIE1);                    // Turn on timer1 interrupt-on-capture
 49e:	80 e2       	ldi	r24, 0x20	; 32
 4a0:	80 93 6f 00 	sts	0x006F, r24

	ACSR = (1<<ACIC) ; // Set analog comp to connect to timer capture input
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	80 bf       	out	0x30, r24	; 48
	DDRB = 0;          // Comparator negative input is B.3
 4a8:	14 b8       	out	0x04, r1	; 4

	//LCD init
	init_lcd();
 4aa:	0e 94 33 02 	call	0x466	; 0x466 <init_lcd>
	LCDclr();
 4ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>
}
 4b2:	08 95       	ret

000004b4 <task1>:
	if (time1==0){time1=t1;	task1();}

}
void blinkLEDs(void); // Blink some LEDs for testing
void task1(void)
{
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
	DDRB=(0<<DDB3);	// Port b.3 is an input and port b.2
 4b8:	14 b8       	out	0x04, r1	; 4
	DDRB=(1<<DDB2); // is an output
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	84 b9       	out	0x04, r24	; 4
	
	//Compute Capacitance
	capacitance = T1capture;///(11207.4); //amount of time for charging capacitance to comparator switch
 4be:	80 91 17 01 	lds	r24, 0x0117
 4c2:	90 91 18 01 	lds	r25, 0x0118
 4c6:	90 93 1a 01 	sts	0x011A, r25
 4ca:	80 93 19 01 	sts	0x0119, r24
									  // Assuming R3/R3 + R4 ratio is 0.6 and the capicitance is between 1 nF and 100 nF
	//Update LCD	
	sprintf(lcd_buffer,"%-i",capacitance);
 4ce:	04 e0       	ldi	r16, 0x04	; 4
 4d0:	11 e0       	ldi	r17, 0x01	; 1
 4d2:	20 91 19 01 	lds	r18, 0x0119
 4d6:	30 91 1a 01 	lds	r19, 0x011A
 4da:	00 d0       	rcall	.+0      	; 0x4dc <task1+0x28>
 4dc:	00 d0       	rcall	.+0      	; 0x4de <task1+0x2a>
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <task1+0x2c>
 4e0:	ed b7       	in	r30, 0x3d	; 61
 4e2:	fe b7       	in	r31, 0x3e	; 62
 4e4:	31 96       	adiw	r30, 0x01	; 1
 4e6:	ad b7       	in	r26, 0x3d	; 61
 4e8:	be b7       	in	r27, 0x3e	; 62
 4ea:	12 96       	adiw	r26, 0x02	; 2
 4ec:	1c 93       	st	X, r17
 4ee:	0e 93       	st	-X, r16
 4f0:	11 97       	sbiw	r26, 0x01	; 1
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	93 83       	std	Z+3, r25	; 0x03
 4f8:	82 83       	std	Z+2, r24	; 0x02
 4fa:	35 83       	std	Z+5, r19	; 0x05
 4fc:	24 83       	std	Z+4, r18	; 0x04
 4fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <sprintf>
	LCDGotoXY(4, 0);
 502:	8d b7       	in	r24, 0x3d	; 61
 504:	9e b7       	in	r25, 0x3e	; 62
 506:	06 96       	adiw	r24, 0x06	; 6
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	9e bf       	out	0x3e, r25	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	8d bf       	out	0x3d, r24	; 61
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
  	// display the count 
	LCDstring(lcd_buffer, strlen(lcd_buffer));	
 51a:	f8 01       	movw	r30, r16
 51c:	01 90       	ld	r0, Z+
 51e:	00 20       	and	r0, r0
 520:	e9 f7       	brne	.-6      	; 0x51c <task1+0x68>
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	e0 1b       	sub	r30, r16
 526:	f1 0b       	sbc	r31, r17
 528:	c8 01       	movw	r24, r16
 52a:	6e 2f       	mov	r22, r30
 52c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDstring>
	CopyStringtoLCD(LCD_capacitance, 0, 0);
 530:	80 91 1c 01 	lds	r24, 0x011C
 534:	90 91 1d 01 	lds	r25, 0x011D
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>

	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
 540:	14 b8       	out	0x04, r1	; 4
}
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <main>:
void initialize(void); // Set up the MCU


int main(void)
{
	initialize();
 548:	0e 94 44 02 	call	0x488	; 0x488 <initialize>
	if (time1==0){time1=t1;	task1();}
 54c:	80 91 16 01 	lds	r24, 0x0116
 550:	88 23       	and	r24, r24
 552:	29 f4       	brne	.+10     	; 0x55e <main+0x16>
 554:	88 ec       	ldi	r24, 0xC8	; 200
 556:	80 93 16 01 	sts	0x0116, r24
 55a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <task1>

}
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	08 95       	ret

00000564 <__udivmodhi4>:
 564:	aa 1b       	sub	r26, r26
 566:	bb 1b       	sub	r27, r27
 568:	51 e1       	ldi	r21, 0x11	; 17
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__udivmodhi4_ep>

0000056c <__udivmodhi4_loop>:
 56c:	aa 1f       	adc	r26, r26
 56e:	bb 1f       	adc	r27, r27
 570:	a6 17       	cp	r26, r22
 572:	b7 07       	cpc	r27, r23
 574:	10 f0       	brcs	.+4      	; 0x57a <__udivmodhi4_ep>
 576:	a6 1b       	sub	r26, r22
 578:	b7 0b       	sbc	r27, r23

0000057a <__udivmodhi4_ep>:
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	5a 95       	dec	r21
 580:	a9 f7       	brne	.-22     	; 0x56c <__udivmodhi4_loop>
 582:	80 95       	com	r24
 584:	90 95       	com	r25
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	08 95       	ret

0000058c <__divmodhi4>:
 58c:	97 fb       	bst	r25, 7
 58e:	09 2e       	mov	r0, r25
 590:	07 26       	eor	r0, r23
 592:	0a d0       	rcall	.+20     	; 0x5a8 <__divmodhi4_neg1>
 594:	77 fd       	sbrc	r23, 7
 596:	04 d0       	rcall	.+8      	; 0x5a0 <__divmodhi4_neg2>
 598:	e5 df       	rcall	.-54     	; 0x564 <__udivmodhi4>
 59a:	06 d0       	rcall	.+12     	; 0x5a8 <__divmodhi4_neg1>
 59c:	00 20       	and	r0, r0
 59e:	1a f4       	brpl	.+6      	; 0x5a6 <__divmodhi4_exit>

000005a0 <__divmodhi4_neg2>:
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255

000005a6 <__divmodhi4_exit>:
 5a6:	08 95       	ret

000005a8 <__divmodhi4_neg1>:
 5a8:	f6 f7       	brtc	.-4      	; 0x5a6 <__divmodhi4_exit>
 5aa:	90 95       	com	r25
 5ac:	81 95       	neg	r24
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <sprintf>:
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	df 93       	push	r29
 5b8:	cf 93       	push	r28
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	2e 97       	sbiw	r28, 0x0e	; 14
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	0d 89       	ldd	r16, Y+21	; 0x15
 5cc:	1e 89       	ldd	r17, Y+22	; 0x16
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	8c 83       	std	Y+4, r24	; 0x04
 5d2:	1a 83       	std	Y+2, r17	; 0x02
 5d4:	09 83       	std	Y+1, r16	; 0x01
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	9f e7       	ldi	r25, 0x7F	; 127
 5da:	9e 83       	std	Y+6, r25	; 0x06
 5dc:	8d 83       	std	Y+5, r24	; 0x05
 5de:	9e 01       	movw	r18, r28
 5e0:	27 5e       	subi	r18, 0xE7	; 231
 5e2:	3f 4f       	sbci	r19, 0xFF	; 255
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	6f 89       	ldd	r22, Y+23	; 0x17
 5ea:	78 8d       	ldd	r23, Y+24	; 0x18
 5ec:	a9 01       	movw	r20, r18
 5ee:	0e 94 0a 03 	call	0x614	; 0x614 <vfprintf>
 5f2:	2f 81       	ldd	r18, Y+7	; 0x07
 5f4:	38 85       	ldd	r19, Y+8	; 0x08
 5f6:	02 0f       	add	r16, r18
 5f8:	13 1f       	adc	r17, r19
 5fa:	f8 01       	movw	r30, r16
 5fc:	10 82       	st	Z, r1
 5fe:	2e 96       	adiw	r28, 0x0e	; 14
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <vfprintf>:
 614:	2f 92       	push	r2
 616:	3f 92       	push	r3
 618:	4f 92       	push	r4
 61a:	5f 92       	push	r5
 61c:	6f 92       	push	r6
 61e:	7f 92       	push	r7
 620:	8f 92       	push	r8
 622:	9f 92       	push	r9
 624:	af 92       	push	r10
 626:	bf 92       	push	r11
 628:	cf 92       	push	r12
 62a:	df 92       	push	r13
 62c:	ef 92       	push	r14
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
 63c:	2b 97       	sbiw	r28, 0x0b	; 11
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	de bf       	out	0x3e, r29	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	cd bf       	out	0x3d, r28	; 61
 648:	3c 01       	movw	r6, r24
 64a:	2b 01       	movw	r4, r22
 64c:	5a 01       	movw	r10, r20
 64e:	fc 01       	movw	r30, r24
 650:	17 82       	std	Z+7, r1	; 0x07
 652:	16 82       	std	Z+6, r1	; 0x06
 654:	83 81       	ldd	r24, Z+3	; 0x03
 656:	81 fd       	sbrc	r24, 1
 658:	03 c0       	rjmp	.+6      	; 0x660 <vfprintf+0x4c>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c6 c1       	rjmp	.+908    	; 0x9ec <vfprintf+0x3d8>
 660:	9a e0       	ldi	r25, 0x0A	; 10
 662:	89 2e       	mov	r8, r25
 664:	1e 01       	movw	r2, r28
 666:	08 94       	sec
 668:	21 1c       	adc	r2, r1
 66a:	31 1c       	adc	r3, r1
 66c:	f3 01       	movw	r30, r6
 66e:	23 81       	ldd	r18, Z+3	; 0x03
 670:	f2 01       	movw	r30, r4
 672:	23 fd       	sbrc	r18, 3
 674:	85 91       	lpm	r24, Z+
 676:	23 ff       	sbrs	r18, 3
 678:	81 91       	ld	r24, Z+
 67a:	2f 01       	movw	r4, r30
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <vfprintf+0x6e>
 680:	b2 c1       	rjmp	.+868    	; 0x9e6 <vfprintf+0x3d2>
 682:	85 32       	cpi	r24, 0x25	; 37
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0x80>
 686:	23 fd       	sbrc	r18, 3
 688:	85 91       	lpm	r24, Z+
 68a:	23 ff       	sbrs	r18, 3
 68c:	81 91       	ld	r24, Z+
 68e:	2f 01       	movw	r4, r30
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	29 f4       	brne	.+10     	; 0x69e <vfprintf+0x8a>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	b3 01       	movw	r22, r6
 698:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 69c:	e7 cf       	rjmp	.-50     	; 0x66c <vfprintf+0x58>
 69e:	98 2f       	mov	r25, r24
 6a0:	ff 24       	eor	r15, r15
 6a2:	ee 24       	eor	r14, r14
 6a4:	99 24       	eor	r9, r9
 6a6:	ff e1       	ldi	r31, 0x1F	; 31
 6a8:	ff 15       	cp	r31, r15
 6aa:	d0 f0       	brcs	.+52     	; 0x6e0 <vfprintf+0xcc>
 6ac:	9b 32       	cpi	r25, 0x2B	; 43
 6ae:	69 f0       	breq	.+26     	; 0x6ca <vfprintf+0xb6>
 6b0:	9c 32       	cpi	r25, 0x2C	; 44
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0xaa>
 6b4:	90 32       	cpi	r25, 0x20	; 32
 6b6:	59 f0       	breq	.+22     	; 0x6ce <vfprintf+0xba>
 6b8:	93 32       	cpi	r25, 0x23	; 35
 6ba:	91 f4       	brne	.+36     	; 0x6e0 <vfprintf+0xcc>
 6bc:	0e c0       	rjmp	.+28     	; 0x6da <vfprintf+0xc6>
 6be:	9d 32       	cpi	r25, 0x2D	; 45
 6c0:	49 f0       	breq	.+18     	; 0x6d4 <vfprintf+0xc0>
 6c2:	90 33       	cpi	r25, 0x30	; 48
 6c4:	69 f4       	brne	.+26     	; 0x6e0 <vfprintf+0xcc>
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	24 c0       	rjmp	.+72     	; 0x712 <vfprintf+0xfe>
 6ca:	52 e0       	ldi	r21, 0x02	; 2
 6cc:	f5 2a       	or	r15, r21
 6ce:	84 e0       	ldi	r24, 0x04	; 4
 6d0:	f8 2a       	or	r15, r24
 6d2:	28 c0       	rjmp	.+80     	; 0x724 <vfprintf+0x110>
 6d4:	98 e0       	ldi	r25, 0x08	; 8
 6d6:	f9 2a       	or	r15, r25
 6d8:	25 c0       	rjmp	.+74     	; 0x724 <vfprintf+0x110>
 6da:	e0 e1       	ldi	r30, 0x10	; 16
 6dc:	fe 2a       	or	r15, r30
 6de:	22 c0       	rjmp	.+68     	; 0x724 <vfprintf+0x110>
 6e0:	f7 fc       	sbrc	r15, 7
 6e2:	29 c0       	rjmp	.+82     	; 0x736 <vfprintf+0x122>
 6e4:	89 2f       	mov	r24, r25
 6e6:	80 53       	subi	r24, 0x30	; 48
 6e8:	8a 30       	cpi	r24, 0x0A	; 10
 6ea:	70 f4       	brcc	.+28     	; 0x708 <vfprintf+0xf4>
 6ec:	f6 fe       	sbrs	r15, 6
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <vfprintf+0xe6>
 6f0:	98 9c       	mul	r9, r8
 6f2:	90 2c       	mov	r9, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	98 0e       	add	r9, r24
 6f8:	15 c0       	rjmp	.+42     	; 0x724 <vfprintf+0x110>
 6fa:	e8 9c       	mul	r14, r8
 6fc:	e0 2c       	mov	r14, r0
 6fe:	11 24       	eor	r1, r1
 700:	e8 0e       	add	r14, r24
 702:	f0 e2       	ldi	r31, 0x20	; 32
 704:	ff 2a       	or	r15, r31
 706:	0e c0       	rjmp	.+28     	; 0x724 <vfprintf+0x110>
 708:	9e 32       	cpi	r25, 0x2E	; 46
 70a:	29 f4       	brne	.+10     	; 0x716 <vfprintf+0x102>
 70c:	f6 fc       	sbrc	r15, 6
 70e:	6b c1       	rjmp	.+726    	; 0x9e6 <vfprintf+0x3d2>
 710:	40 e4       	ldi	r20, 0x40	; 64
 712:	f4 2a       	or	r15, r20
 714:	07 c0       	rjmp	.+14     	; 0x724 <vfprintf+0x110>
 716:	9c 36       	cpi	r25, 0x6C	; 108
 718:	19 f4       	brne	.+6      	; 0x720 <vfprintf+0x10c>
 71a:	50 e8       	ldi	r21, 0x80	; 128
 71c:	f5 2a       	or	r15, r21
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x110>
 720:	98 36       	cpi	r25, 0x68	; 104
 722:	49 f4       	brne	.+18     	; 0x736 <vfprintf+0x122>
 724:	f2 01       	movw	r30, r4
 726:	23 fd       	sbrc	r18, 3
 728:	95 91       	lpm	r25, Z+
 72a:	23 ff       	sbrs	r18, 3
 72c:	91 91       	ld	r25, Z+
 72e:	2f 01       	movw	r4, r30
 730:	99 23       	and	r25, r25
 732:	09 f0       	breq	.+2      	; 0x736 <vfprintf+0x122>
 734:	b8 cf       	rjmp	.-144    	; 0x6a6 <vfprintf+0x92>
 736:	89 2f       	mov	r24, r25
 738:	85 54       	subi	r24, 0x45	; 69
 73a:	83 30       	cpi	r24, 0x03	; 3
 73c:	18 f0       	brcs	.+6      	; 0x744 <vfprintf+0x130>
 73e:	80 52       	subi	r24, 0x20	; 32
 740:	83 30       	cpi	r24, 0x03	; 3
 742:	38 f4       	brcc	.+14     	; 0x752 <vfprintf+0x13e>
 744:	44 e0       	ldi	r20, 0x04	; 4
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	a4 0e       	add	r10, r20
 74a:	b5 1e       	adc	r11, r21
 74c:	5f e3       	ldi	r21, 0x3F	; 63
 74e:	59 83       	std	Y+1, r21	; 0x01
 750:	0f c0       	rjmp	.+30     	; 0x770 <vfprintf+0x15c>
 752:	93 36       	cpi	r25, 0x63	; 99
 754:	31 f0       	breq	.+12     	; 0x762 <vfprintf+0x14e>
 756:	93 37       	cpi	r25, 0x73	; 115
 758:	79 f0       	breq	.+30     	; 0x778 <vfprintf+0x164>
 75a:	93 35       	cpi	r25, 0x53	; 83
 75c:	09 f0       	breq	.+2      	; 0x760 <vfprintf+0x14c>
 75e:	56 c0       	rjmp	.+172    	; 0x80c <vfprintf+0x1f8>
 760:	20 c0       	rjmp	.+64     	; 0x7a2 <vfprintf+0x18e>
 762:	f5 01       	movw	r30, r10
 764:	80 81       	ld	r24, Z
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	42 e0       	ldi	r20, 0x02	; 2
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	a4 0e       	add	r10, r20
 76e:	b5 1e       	adc	r11, r21
 770:	61 01       	movw	r12, r2
 772:	01 e0       	ldi	r16, 0x01	; 1
 774:	10 e0       	ldi	r17, 0x00	; 0
 776:	12 c0       	rjmp	.+36     	; 0x79c <vfprintf+0x188>
 778:	f5 01       	movw	r30, r10
 77a:	c0 80       	ld	r12, Z
 77c:	d1 80       	ldd	r13, Z+1	; 0x01
 77e:	f6 fc       	sbrc	r15, 6
 780:	03 c0       	rjmp	.+6      	; 0x788 <vfprintf+0x174>
 782:	6f ef       	ldi	r22, 0xFF	; 255
 784:	7f ef       	ldi	r23, 0xFF	; 255
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0x178>
 788:	69 2d       	mov	r22, r9
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	42 e0       	ldi	r20, 0x02	; 2
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	a4 0e       	add	r10, r20
 792:	b5 1e       	adc	r11, r21
 794:	c6 01       	movw	r24, r12
 796:	0e 94 1b 05 	call	0xa36	; 0xa36 <strnlen>
 79a:	8c 01       	movw	r16, r24
 79c:	5f e7       	ldi	r21, 0x7F	; 127
 79e:	f5 22       	and	r15, r21
 7a0:	14 c0       	rjmp	.+40     	; 0x7ca <vfprintf+0x1b6>
 7a2:	f5 01       	movw	r30, r10
 7a4:	c0 80       	ld	r12, Z
 7a6:	d1 80       	ldd	r13, Z+1	; 0x01
 7a8:	f6 fc       	sbrc	r15, 6
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x19e>
 7ac:	6f ef       	ldi	r22, 0xFF	; 255
 7ae:	7f ef       	ldi	r23, 0xFF	; 255
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x1a2>
 7b2:	69 2d       	mov	r22, r9
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	42 e0       	ldi	r20, 0x02	; 2
 7b8:	50 e0       	ldi	r21, 0x00	; 0
 7ba:	a4 0e       	add	r10, r20
 7bc:	b5 1e       	adc	r11, r21
 7be:	c6 01       	movw	r24, r12
 7c0:	0e 94 10 05 	call	0xa20	; 0xa20 <strnlen_P>
 7c4:	8c 01       	movw	r16, r24
 7c6:	50 e8       	ldi	r21, 0x80	; 128
 7c8:	f5 2a       	or	r15, r21
 7ca:	f3 fe       	sbrs	r15, 3
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <vfprintf+0x1c8>
 7ce:	1a c0       	rjmp	.+52     	; 0x804 <vfprintf+0x1f0>
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	b3 01       	movw	r22, r6
 7d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 7da:	ea 94       	dec	r14
 7dc:	8e 2d       	mov	r24, r14
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	08 17       	cp	r16, r24
 7e2:	19 07       	cpc	r17, r25
 7e4:	a8 f3       	brcs	.-22     	; 0x7d0 <vfprintf+0x1bc>
 7e6:	0e c0       	rjmp	.+28     	; 0x804 <vfprintf+0x1f0>
 7e8:	f6 01       	movw	r30, r12
 7ea:	f7 fc       	sbrc	r15, 7
 7ec:	85 91       	lpm	r24, Z+
 7ee:	f7 fe       	sbrs	r15, 7
 7f0:	81 91       	ld	r24, Z+
 7f2:	6f 01       	movw	r12, r30
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	b3 01       	movw	r22, r6
 7f8:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 7fc:	e1 10       	cpse	r14, r1
 7fe:	ea 94       	dec	r14
 800:	01 50       	subi	r16, 0x01	; 1
 802:	10 40       	sbci	r17, 0x00	; 0
 804:	01 15       	cp	r16, r1
 806:	11 05       	cpc	r17, r1
 808:	79 f7       	brne	.-34     	; 0x7e8 <vfprintf+0x1d4>
 80a:	ea c0       	rjmp	.+468    	; 0x9e0 <vfprintf+0x3cc>
 80c:	94 36       	cpi	r25, 0x64	; 100
 80e:	11 f0       	breq	.+4      	; 0x814 <vfprintf+0x200>
 810:	99 36       	cpi	r25, 0x69	; 105
 812:	69 f5       	brne	.+90     	; 0x86e <vfprintf+0x25a>
 814:	f7 fe       	sbrs	r15, 7
 816:	08 c0       	rjmp	.+16     	; 0x828 <vfprintf+0x214>
 818:	f5 01       	movw	r30, r10
 81a:	20 81       	ld	r18, Z
 81c:	31 81       	ldd	r19, Z+1	; 0x01
 81e:	42 81       	ldd	r20, Z+2	; 0x02
 820:	53 81       	ldd	r21, Z+3	; 0x03
 822:	84 e0       	ldi	r24, 0x04	; 4
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0a c0       	rjmp	.+20     	; 0x83c <vfprintf+0x228>
 828:	f5 01       	movw	r30, r10
 82a:	80 81       	ld	r24, Z
 82c:	91 81       	ldd	r25, Z+1	; 0x01
 82e:	9c 01       	movw	r18, r24
 830:	44 27       	eor	r20, r20
 832:	37 fd       	sbrc	r19, 7
 834:	40 95       	com	r20
 836:	54 2f       	mov	r21, r20
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	a8 0e       	add	r10, r24
 83e:	b9 1e       	adc	r11, r25
 840:	9f e6       	ldi	r25, 0x6F	; 111
 842:	f9 22       	and	r15, r25
 844:	57 ff       	sbrs	r21, 7
 846:	09 c0       	rjmp	.+18     	; 0x85a <vfprintf+0x246>
 848:	50 95       	com	r21
 84a:	40 95       	com	r20
 84c:	30 95       	com	r19
 84e:	21 95       	neg	r18
 850:	3f 4f       	sbci	r19, 0xFF	; 255
 852:	4f 4f       	sbci	r20, 0xFF	; 255
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	e0 e8       	ldi	r30, 0x80	; 128
 858:	fe 2a       	or	r15, r30
 85a:	ca 01       	movw	r24, r20
 85c:	b9 01       	movw	r22, r18
 85e:	a1 01       	movw	r20, r2
 860:	2a e0       	ldi	r18, 0x0A	; 10
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 868:	d8 2e       	mov	r13, r24
 86a:	d2 18       	sub	r13, r2
 86c:	40 c0       	rjmp	.+128    	; 0x8ee <vfprintf+0x2da>
 86e:	95 37       	cpi	r25, 0x75	; 117
 870:	29 f4       	brne	.+10     	; 0x87c <vfprintf+0x268>
 872:	1f 2d       	mov	r17, r15
 874:	1f 7e       	andi	r17, 0xEF	; 239
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	1d c0       	rjmp	.+58     	; 0x8b6 <vfprintf+0x2a2>
 87c:	1f 2d       	mov	r17, r15
 87e:	19 7f       	andi	r17, 0xF9	; 249
 880:	9f 36       	cpi	r25, 0x6F	; 111
 882:	61 f0       	breq	.+24     	; 0x89c <vfprintf+0x288>
 884:	90 37       	cpi	r25, 0x70	; 112
 886:	20 f4       	brcc	.+8      	; 0x890 <vfprintf+0x27c>
 888:	98 35       	cpi	r25, 0x58	; 88
 88a:	09 f0       	breq	.+2      	; 0x88e <vfprintf+0x27a>
 88c:	ac c0       	rjmp	.+344    	; 0x9e6 <vfprintf+0x3d2>
 88e:	0f c0       	rjmp	.+30     	; 0x8ae <vfprintf+0x29a>
 890:	90 37       	cpi	r25, 0x70	; 112
 892:	39 f0       	breq	.+14     	; 0x8a2 <vfprintf+0x28e>
 894:	98 37       	cpi	r25, 0x78	; 120
 896:	09 f0       	breq	.+2      	; 0x89a <vfprintf+0x286>
 898:	a6 c0       	rjmp	.+332    	; 0x9e6 <vfprintf+0x3d2>
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <vfprintf+0x290>
 89c:	28 e0       	ldi	r18, 0x08	; 8
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <vfprintf+0x2a2>
 8a2:	10 61       	ori	r17, 0x10	; 16
 8a4:	14 fd       	sbrc	r17, 4
 8a6:	14 60       	ori	r17, 0x04	; 4
 8a8:	20 e1       	ldi	r18, 0x10	; 16
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <vfprintf+0x2a2>
 8ae:	14 fd       	sbrc	r17, 4
 8b0:	16 60       	ori	r17, 0x06	; 6
 8b2:	20 e1       	ldi	r18, 0x10	; 16
 8b4:	32 e0       	ldi	r19, 0x02	; 2
 8b6:	17 ff       	sbrs	r17, 7
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <vfprintf+0x2b6>
 8ba:	f5 01       	movw	r30, r10
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	82 81       	ldd	r24, Z+2	; 0x02
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	44 e0       	ldi	r20, 0x04	; 4
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	08 c0       	rjmp	.+16     	; 0x8da <vfprintf+0x2c6>
 8ca:	f5 01       	movw	r30, r10
 8cc:	80 81       	ld	r24, Z
 8ce:	91 81       	ldd	r25, Z+1	; 0x01
 8d0:	bc 01       	movw	r22, r24
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	42 e0       	ldi	r20, 0x02	; 2
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	a4 0e       	add	r10, r20
 8dc:	b5 1e       	adc	r11, r21
 8de:	a1 01       	movw	r20, r2
 8e0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 8e4:	d8 2e       	mov	r13, r24
 8e6:	d2 18       	sub	r13, r2
 8e8:	8f e7       	ldi	r24, 0x7F	; 127
 8ea:	f8 2e       	mov	r15, r24
 8ec:	f1 22       	and	r15, r17
 8ee:	f6 fe       	sbrs	r15, 6
 8f0:	0b c0       	rjmp	.+22     	; 0x908 <vfprintf+0x2f4>
 8f2:	5e ef       	ldi	r21, 0xFE	; 254
 8f4:	f5 22       	and	r15, r21
 8f6:	d9 14       	cp	r13, r9
 8f8:	38 f4       	brcc	.+14     	; 0x908 <vfprintf+0x2f4>
 8fa:	f4 fe       	sbrs	r15, 4
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <vfprintf+0x2f8>
 8fe:	f2 fc       	sbrc	r15, 2
 900:	05 c0       	rjmp	.+10     	; 0x90c <vfprintf+0x2f8>
 902:	8f ee       	ldi	r24, 0xEF	; 239
 904:	f8 22       	and	r15, r24
 906:	02 c0       	rjmp	.+4      	; 0x90c <vfprintf+0x2f8>
 908:	1d 2d       	mov	r17, r13
 90a:	01 c0       	rjmp	.+2      	; 0x90e <vfprintf+0x2fa>
 90c:	19 2d       	mov	r17, r9
 90e:	f4 fe       	sbrs	r15, 4
 910:	0d c0       	rjmp	.+26     	; 0x92c <vfprintf+0x318>
 912:	fe 01       	movw	r30, r28
 914:	ed 0d       	add	r30, r13
 916:	f1 1d       	adc	r31, r1
 918:	80 81       	ld	r24, Z
 91a:	80 33       	cpi	r24, 0x30	; 48
 91c:	19 f4       	brne	.+6      	; 0x924 <vfprintf+0x310>
 91e:	99 ee       	ldi	r25, 0xE9	; 233
 920:	f9 22       	and	r15, r25
 922:	08 c0       	rjmp	.+16     	; 0x934 <vfprintf+0x320>
 924:	1f 5f       	subi	r17, 0xFF	; 255
 926:	f2 fe       	sbrs	r15, 2
 928:	05 c0       	rjmp	.+10     	; 0x934 <vfprintf+0x320>
 92a:	03 c0       	rjmp	.+6      	; 0x932 <vfprintf+0x31e>
 92c:	8f 2d       	mov	r24, r15
 92e:	86 78       	andi	r24, 0x86	; 134
 930:	09 f0       	breq	.+2      	; 0x934 <vfprintf+0x320>
 932:	1f 5f       	subi	r17, 0xFF	; 255
 934:	0f 2d       	mov	r16, r15
 936:	f3 fc       	sbrc	r15, 3
 938:	14 c0       	rjmp	.+40     	; 0x962 <vfprintf+0x34e>
 93a:	f0 fe       	sbrs	r15, 0
 93c:	0f c0       	rjmp	.+30     	; 0x95c <vfprintf+0x348>
 93e:	1e 15       	cp	r17, r14
 940:	10 f0       	brcs	.+4      	; 0x946 <vfprintf+0x332>
 942:	9d 2c       	mov	r9, r13
 944:	0b c0       	rjmp	.+22     	; 0x95c <vfprintf+0x348>
 946:	9d 2c       	mov	r9, r13
 948:	9e 0c       	add	r9, r14
 94a:	91 1a       	sub	r9, r17
 94c:	1e 2d       	mov	r17, r14
 94e:	06 c0       	rjmp	.+12     	; 0x95c <vfprintf+0x348>
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	b3 01       	movw	r22, r6
 956:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 95a:	1f 5f       	subi	r17, 0xFF	; 255
 95c:	1e 15       	cp	r17, r14
 95e:	c0 f3       	brcs	.-16     	; 0x950 <vfprintf+0x33c>
 960:	04 c0       	rjmp	.+8      	; 0x96a <vfprintf+0x356>
 962:	1e 15       	cp	r17, r14
 964:	10 f4       	brcc	.+4      	; 0x96a <vfprintf+0x356>
 966:	e1 1a       	sub	r14, r17
 968:	01 c0       	rjmp	.+2      	; 0x96c <vfprintf+0x358>
 96a:	ee 24       	eor	r14, r14
 96c:	04 ff       	sbrs	r16, 4
 96e:	0f c0       	rjmp	.+30     	; 0x98e <vfprintf+0x37a>
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	b3 01       	movw	r22, r6
 976:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 97a:	02 ff       	sbrs	r16, 2
 97c:	1d c0       	rjmp	.+58     	; 0x9b8 <vfprintf+0x3a4>
 97e:	01 fd       	sbrc	r16, 1
 980:	03 c0       	rjmp	.+6      	; 0x988 <vfprintf+0x374>
 982:	88 e7       	ldi	r24, 0x78	; 120
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e c0       	rjmp	.+28     	; 0x9a4 <vfprintf+0x390>
 988:	88 e5       	ldi	r24, 0x58	; 88
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0b c0       	rjmp	.+22     	; 0x9a4 <vfprintf+0x390>
 98e:	80 2f       	mov	r24, r16
 990:	86 78       	andi	r24, 0x86	; 134
 992:	91 f0       	breq	.+36     	; 0x9b8 <vfprintf+0x3a4>
 994:	01 ff       	sbrs	r16, 1
 996:	02 c0       	rjmp	.+4      	; 0x99c <vfprintf+0x388>
 998:	8b e2       	ldi	r24, 0x2B	; 43
 99a:	01 c0       	rjmp	.+2      	; 0x99e <vfprintf+0x38a>
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	f7 fc       	sbrc	r15, 7
 9a0:	8d e2       	ldi	r24, 0x2D	; 45
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	b3 01       	movw	r22, r6
 9a6:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <vfprintf+0x3a4>
 9ac:	80 e3       	ldi	r24, 0x30	; 48
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	b3 01       	movw	r22, r6
 9b2:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9b6:	9a 94       	dec	r9
 9b8:	d9 14       	cp	r13, r9
 9ba:	c0 f3       	brcs	.-16     	; 0x9ac <vfprintf+0x398>
 9bc:	da 94       	dec	r13
 9be:	f1 01       	movw	r30, r2
 9c0:	ed 0d       	add	r30, r13
 9c2:	f1 1d       	adc	r31, r1
 9c4:	80 81       	ld	r24, Z
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	b3 01       	movw	r22, r6
 9ca:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9ce:	dd 20       	and	r13, r13
 9d0:	a9 f7       	brne	.-22     	; 0x9bc <vfprintf+0x3a8>
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x3cc>
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	b3 01       	movw	r22, r6
 9da:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9de:	ea 94       	dec	r14
 9e0:	ee 20       	and	r14, r14
 9e2:	c1 f7       	brne	.-16     	; 0x9d4 <vfprintf+0x3c0>
 9e4:	43 ce       	rjmp	.-890    	; 0x66c <vfprintf+0x58>
 9e6:	f3 01       	movw	r30, r6
 9e8:	66 81       	ldd	r22, Z+6	; 0x06
 9ea:	77 81       	ldd	r23, Z+7	; 0x07
 9ec:	cb 01       	movw	r24, r22
 9ee:	2b 96       	adiw	r28, 0x0b	; 11
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	ff 90       	pop	r15
 a04:	ef 90       	pop	r14
 a06:	df 90       	pop	r13
 a08:	cf 90       	pop	r12
 a0a:	bf 90       	pop	r11
 a0c:	af 90       	pop	r10
 a0e:	9f 90       	pop	r9
 a10:	8f 90       	pop	r8
 a12:	7f 90       	pop	r7
 a14:	6f 90       	pop	r6
 a16:	5f 90       	pop	r5
 a18:	4f 90       	pop	r4
 a1a:	3f 90       	pop	r3
 a1c:	2f 90       	pop	r2
 a1e:	08 95       	ret

00000a20 <strnlen_P>:
 a20:	fc 01       	movw	r30, r24
 a22:	05 90       	lpm	r0, Z+
 a24:	61 50       	subi	r22, 0x01	; 1
 a26:	70 40       	sbci	r23, 0x00	; 0
 a28:	01 10       	cpse	r0, r1
 a2a:	d8 f7       	brcc	.-10     	; 0xa22 <strnlen_P+0x2>
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	08 95       	ret

00000a36 <strnlen>:
 a36:	fc 01       	movw	r30, r24
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	70 40       	sbci	r23, 0x00	; 0
 a3c:	01 90       	ld	r0, Z+
 a3e:	01 10       	cpse	r0, r1
 a40:	d8 f7       	brcc	.-10     	; 0xa38 <strnlen+0x2>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	8e 0f       	add	r24, r30
 a48:	9f 1f       	adc	r25, r31
 a4a:	08 95       	ret

00000a4c <fputc>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	8c 01       	movw	r16, r24
 a56:	eb 01       	movw	r28, r22
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	81 ff       	sbrs	r24, 1
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <fputc+0x48>
 a5e:	82 ff       	sbrs	r24, 2
 a60:	0d c0       	rjmp	.+26     	; 0xa7c <fputc+0x30>
 a62:	2e 81       	ldd	r18, Y+6	; 0x06
 a64:	3f 81       	ldd	r19, Y+7	; 0x07
 a66:	8c 81       	ldd	r24, Y+4	; 0x04
 a68:	9d 81       	ldd	r25, Y+5	; 0x05
 a6a:	28 17       	cp	r18, r24
 a6c:	39 07       	cpc	r19, r25
 a6e:	64 f4       	brge	.+24     	; 0xa88 <fputc+0x3c>
 a70:	e8 81       	ld	r30, Y
 a72:	f9 81       	ldd	r31, Y+1	; 0x01
 a74:	01 93       	st	Z+, r16
 a76:	f9 83       	std	Y+1, r31	; 0x01
 a78:	e8 83       	st	Y, r30
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <fputc+0x3c>
 a7c:	e8 85       	ldd	r30, Y+8	; 0x08
 a7e:	f9 85       	ldd	r31, Y+9	; 0x09
 a80:	80 2f       	mov	r24, r16
 a82:	09 95       	icall
 a84:	89 2b       	or	r24, r25
 a86:	31 f4       	brne	.+12     	; 0xa94 <fputc+0x48>
 a88:	8e 81       	ldd	r24, Y+6	; 0x06
 a8a:	9f 81       	ldd	r25, Y+7	; 0x07
 a8c:	01 96       	adiw	r24, 0x01	; 1
 a8e:	9f 83       	std	Y+7, r25	; 0x07
 a90:	8e 83       	std	Y+6, r24	; 0x06
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <fputc+0x4c>
 a94:	0f ef       	ldi	r16, 0xFF	; 255
 a96:	1f ef       	ldi	r17, 0xFF	; 255
 a98:	c8 01       	movw	r24, r16
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	08 95       	ret

00000aa4 <__ultoa_invert>:
 aa4:	fa 01       	movw	r30, r20
 aa6:	aa 27       	eor	r26, r26
 aa8:	28 30       	cpi	r18, 0x08	; 8
 aaa:	51 f1       	breq	.+84     	; 0xb00 <__ultoa_invert+0x5c>
 aac:	20 31       	cpi	r18, 0x10	; 16
 aae:	81 f1       	breq	.+96     	; 0xb10 <__ultoa_invert+0x6c>
 ab0:	e8 94       	clt
 ab2:	6f 93       	push	r22
 ab4:	6e 7f       	andi	r22, 0xFE	; 254
 ab6:	6e 5f       	subi	r22, 0xFE	; 254
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	af 4f       	sbci	r26, 0xFF	; 255
 ac0:	b1 e0       	ldi	r27, 0x01	; 1
 ac2:	3e d0       	rcall	.+124    	; 0xb40 <__ultoa_invert+0x9c>
 ac4:	b4 e0       	ldi	r27, 0x04	; 4
 ac6:	3c d0       	rcall	.+120    	; 0xb40 <__ultoa_invert+0x9c>
 ac8:	67 0f       	add	r22, r23
 aca:	78 1f       	adc	r23, r24
 acc:	89 1f       	adc	r24, r25
 ace:	9a 1f       	adc	r25, r26
 ad0:	a1 1d       	adc	r26, r1
 ad2:	68 0f       	add	r22, r24
 ad4:	79 1f       	adc	r23, r25
 ad6:	8a 1f       	adc	r24, r26
 ad8:	91 1d       	adc	r25, r1
 ada:	a1 1d       	adc	r26, r1
 adc:	6a 0f       	add	r22, r26
 ade:	71 1d       	adc	r23, r1
 ae0:	81 1d       	adc	r24, r1
 ae2:	91 1d       	adc	r25, r1
 ae4:	a1 1d       	adc	r26, r1
 ae6:	20 d0       	rcall	.+64     	; 0xb28 <__ultoa_invert+0x84>
 ae8:	09 f4       	brne	.+2      	; 0xaec <__ultoa_invert+0x48>
 aea:	68 94       	set
 aec:	3f 91       	pop	r19
 aee:	2a e0       	ldi	r18, 0x0A	; 10
 af0:	26 9f       	mul	r18, r22
 af2:	11 24       	eor	r1, r1
 af4:	30 19       	sub	r19, r0
 af6:	30 5d       	subi	r19, 0xD0	; 208
 af8:	31 93       	st	Z+, r19
 afa:	de f6       	brtc	.-74     	; 0xab2 <__ultoa_invert+0xe>
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret
 b00:	46 2f       	mov	r20, r22
 b02:	47 70       	andi	r20, 0x07	; 7
 b04:	40 5d       	subi	r20, 0xD0	; 208
 b06:	41 93       	st	Z+, r20
 b08:	b3 e0       	ldi	r27, 0x03	; 3
 b0a:	0f d0       	rcall	.+30     	; 0xb2a <__ultoa_invert+0x86>
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__ultoa_invert+0x5c>
 b0e:	f6 cf       	rjmp	.-20     	; 0xafc <__ultoa_invert+0x58>
 b10:	46 2f       	mov	r20, r22
 b12:	4f 70       	andi	r20, 0x0F	; 15
 b14:	40 5d       	subi	r20, 0xD0	; 208
 b16:	4a 33       	cpi	r20, 0x3A	; 58
 b18:	18 f0       	brcs	.+6      	; 0xb20 <__ultoa_invert+0x7c>
 b1a:	49 5d       	subi	r20, 0xD9	; 217
 b1c:	31 fd       	sbrc	r19, 1
 b1e:	40 52       	subi	r20, 0x20	; 32
 b20:	41 93       	st	Z+, r20
 b22:	02 d0       	rcall	.+4      	; 0xb28 <__ultoa_invert+0x84>
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__ultoa_invert+0x6c>
 b26:	ea cf       	rjmp	.-44     	; 0xafc <__ultoa_invert+0x58>
 b28:	b4 e0       	ldi	r27, 0x04	; 4
 b2a:	a6 95       	lsr	r26
 b2c:	97 95       	ror	r25
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0x86>
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	61 05       	cpc	r22, r1
 b3c:	71 05       	cpc	r23, r1
 b3e:	08 95       	ret
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	0a 2e       	mov	r0, r26
 b46:	06 94       	lsr	r0
 b48:	57 95       	ror	r21
 b4a:	47 95       	ror	r20
 b4c:	37 95       	ror	r19
 b4e:	27 95       	ror	r18
 b50:	ba 95       	dec	r27
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0xa2>
 b54:	62 0f       	add	r22, r18
 b56:	73 1f       	adc	r23, r19
 b58:	84 1f       	adc	r24, r20
 b5a:	95 1f       	adc	r25, r21
 b5c:	a0 1d       	adc	r26, r0
 b5e:	08 95       	ret

00000b60 <_exit>:
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>
