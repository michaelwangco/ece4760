
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b70  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800104  00800104  00000c08  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000251  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ad  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000721  00000000  00000000  00001ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ab  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_12>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_16>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

0000008c <LcdCustomChar>:
  8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_initialize>:
  cc:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000dd <LCD_number>:
  dd:	43 61 70 3d 00 00 00                                Cap=...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d0 e4       	ldi	r29, 0x40	; 64
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	e0 e7       	ldi	r30, 0x70	; 112
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 30       	cpi	r26, 0x04	; 4
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a4 e0       	ldi	r26, 0x04	; 4
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	af 31       	cpi	r26, 0x1F	; 31
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 ab 02 	call	0x556	; 0x556 <main>
 11e:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 126:	28 2f       	mov	r18, r24
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
 12c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 12e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 130:	20 e4       	ldi	r18, 0x40	; 64
 132:	3f e1       	ldi	r19, 0x1F	; 31
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 13a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	44 e0       	ldi	r20, 0x04	; 4
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	4a 95       	dec	r20
 14e:	e1 f7       	brne	.-8      	; 0x148 <LCDsendChar+0x22>
 150:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
 152:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 154:	42 9a       	sbi	0x08, 2	; 8
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 15c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 15e:	40 98       	cbi	0x08, 0	; 8
 160:	c9 01       	movw	r24, r18
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
 166:	08 95       	ret

00000168 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 168:	28 2f       	mov	r18, r24
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
 16e:	42 9a       	sbi	0x08, 2	; 8
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	3f e1       	ldi	r19, 0x1F	; 31
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 17a:	42 98       	cbi	0x08, 2	; 8
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCDsendCommand+0x1e>
 18e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	c9 01       	movw	r24, r18
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	c9 01       	movw	r24, r18
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
 1a0:	08 95       	ret

000001a2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1a8:	08 95       	ret

000001aa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1b0:	08 95       	ret

000001b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	49 f0       	breq	.+18     	; 0x1d2 <LCDstring+0x20>
 1c0:	ec 01       	movw	r28, r24
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1c6:	89 91       	ld	r24, Y+
 1c8:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
 1ce:	10 17       	cp	r17, r16
 1d0:	d0 f3       	brcs	.-12     	; 0x1c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1dc:	62 30       	cpi	r22, 0x02	; 2
 1de:	31 f0       	breq	.+12     	; 0x1ec <LCDGotoXY+0x10>
 1e0:	63 30       	cpi	r22, 0x03	; 3
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <LCDGotoXY+0x14>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1e8:	80 5c       	subi	r24, 0xC0	; 192
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ec:	8c 5e       	subi	r24, 0xEC	; 236
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1f0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
	
}
 1f8:	08 95       	ret

000001fa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 204:	64 2f       	mov	r22, r20
 206:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 20e:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 212:	1f 5f       	subi	r17, 0xFF	; 255
 214:	fe 01       	movw	r30, r28
 216:	e1 0f       	add	r30, r17
 218:	f1 1d       	adc	r31, r1
 21a:	84 91       	lpm	r24, Z+
 21c:	88 23       	and	r24, r24
 21e:	b9 f7       	brne	.-18     	; 0x20e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	7c 01       	movw	r14, r24
 236:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 238:	11 0f       	add	r17, r17
 23a:	11 0f       	add	r17, r17
 23c:	11 0f       	add	r17, r17
 23e:	10 64       	ori	r17, 0x40	; 64
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 244:	f7 01       	movw	r30, r14
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 24c:	81 2f       	mov	r24, r17
 24e:	8c 0f       	add	r24, r28
 250:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendChar(pcc);
 254:	80 2f       	mov	r24, r16
 256:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	c8 30       	cpi	r28, 0x08	; 8
 25e:	d1 05       	cpc	r29, r1
 260:	89 f7       	brne	.-30     	; 0x244 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	9a ee       	ldi	r25, 0xEA	; 234
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 27e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
 280:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 282:	87 b1       	in	r24, 0x07	; 7
 284:	80 6f       	ori	r24, 0xF0	; 240
 286:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	87 60       	ori	r24, 0x07	; 7
 28c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 292:	42 9a       	sbi	0x08, 2	; 8
 294:	20 e4       	ldi	r18, 0x40	; 64
 296:	3f e1       	ldi	r19, 0x1F	; 31
 298:	f9 01       	movw	r30, r18
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 29e:	42 98       	cbi	0x08, 2	; 8
 2a0:	f9 01       	movw	r30, r18
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2a6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2a8:	42 9a       	sbi	0x08, 2	; 8
 2aa:	c9 01       	movw	r24, r18
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2b0:	42 98       	cbi	0x08, 2	; 8
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2bc:	42 9a       	sbi	0x08, 2	; 8
 2be:	c9 01       	movw	r24, r18
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2c4:	42 98       	cbi	0x08, 2	; 8
 2c6:	c9 01       	movw	r24, r18
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
 2d8:	cc e8       	ldi	r28, 0x8C	; 140
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2de:	16 2f       	mov	r17, r22
 2e0:	1f 5f       	subi	r17, 0xFF	; 255
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 14 01 	call	0x228	; 0x228 <LCDdefinechar>
 2e8:	28 96       	adiw	r28, 0x08	; 8
 2ea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2ec:	18 30       	cpi	r17, 0x08	; 8
 2ee:	b9 f7       	brne	.-18     	; 0x2de <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	08 2f       	mov	r16, r24
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	04 c0       	rjmp	.+8      	; 0x30a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	10 17       	cp	r17, r16
 30c:	d0 f3       	brcs	.-12     	; 0x302 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	08 2f       	mov	r16, r24
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	10 17       	cp	r17, r16
 328:	d0 f3       	brcs	.-12     	; 0x31e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 336:	08 95       	ret

00000338 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 33e:	08 95       	ret

00000340 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 346:	08 95       	ret

00000348 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 34e:	08 95       	ret

00000350 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 356:	08 95       	ret

00000358 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	08 2f       	mov	r16, r24
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	04 c0       	rjmp	.+8      	; 0x36a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 368:	1f 5f       	subi	r17, 0xFF	; 255
 36a:	10 17       	cp	r17, r16
 36c:	d0 f3       	brcs	.-12     	; 0x362 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	08 2f       	mov	r16, r24
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	04 c0       	rjmp	.+8      	; 0x386 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 37e:	84 e1       	ldi	r24, 0x14	; 20
 380:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 384:	1f 5f       	subi	r17, 0xFF	; 255
 386:	10 17       	cp	r17, r16
 388:	d0 f3       	brcs	.-12     	; 0x37e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3a0:	96 e0       	ldi	r25, 0x06	; 6
 3a2:	89 9f       	mul	r24, r25
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	24 2f       	mov	r18, r20
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	ac 01       	movw	r20, r24
 3ae:	42 9f       	mul	r20, r18
 3b0:	c0 01       	movw	r24, r0
 3b2:	43 9f       	mul	r20, r19
 3b4:	90 0d       	add	r25, r0
 3b6:	52 9f       	mul	r21, r18
 3b8:	90 0d       	add	r25, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 cc 02 	call	0x598	; 0x598 <__divmodhi4>
 3c2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3c4:	cb 01       	movw	r24, r22
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodhi4>
 3ce:	e8 2e       	mov	r14, r24
 3d0:	ff 24       	eor	r15, r15
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3d8:	c8 01       	movw	r24, r16
 3da:	05 96       	adiw	r24, 0x05	; 5
 3dc:	c8 17       	cp	r28, r24
 3de:	d9 07       	cpc	r29, r25
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <LCDprogressBar+0x56>
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3e6:	c0 17       	cp	r28, r16
 3e8:	d1 07       	cpc	r29, r17
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <LCDprogressBar+0x60>
 3ec:	8e 2d       	mov	r24, r14
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCDprogressBar+0x62>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3f2:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3f6:	f3 94       	inc	r15
 3f8:	0a 5f       	subi	r16, 0xFA	; 250
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	fd 14       	cp	r15, r13
 3fe:	60 f3       	brcs	.-40     	; 0x3d8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	08 95       	ret

00000410 <blinkLED>:
}

void blinkLED(void) 
{
	// blink the onboard LED
	PORTD = 0x00;
 410:	1b b8       	out	0x0b, r1	; 11
}
 412:	08 95       	ret

00000414 <__vector_16>:

//Timer 0 overflow ISR
ISR (TIMER0_COMPA_vect) 
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	8f 93       	push	r24
  if (time1>0)	--time1;
 420:	80 91 16 01 	lds	r24, 0x0116
 424:	88 23       	and	r24, r24
 426:	29 f0       	breq	.+10     	; 0x432 <__vector_16+0x1e>
 428:	80 91 16 01 	lds	r24, 0x0116
 42c:	81 50       	subi	r24, 0x01	; 1
 42e:	80 93 16 01 	sts	0x0116, r24
}
 432:	8f 91       	pop	r24
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_12>:
//Timer 1 capture ISR
ISR (TIMER1_CAPT_vect) 
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
	T1capture = ICR1;
 44c:	80 91 86 00 	lds	r24, 0x0086
 450:	90 91 87 00 	lds	r25, 0x0087
 454:	90 93 18 01 	sts	0x0118, r25
 458:	80 93 17 01 	sts	0x0117, r24
}

void blinkLED(void) 
{
	// blink the onboard LED
	PORTD = 0x00;
 45c:	1b b8       	out	0x0b, r1	; 11
//Timer 1 capture ISR
ISR (TIMER1_CAPT_vect) 
{
	T1capture = ICR1;
	blinkLED();
} 
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <init_lcd>:
	sei();
}

void init_lcd(void) 
{
	LCDinit();				//initialize the display
 46c:	0e 94 38 01 	call	0x270	; 0x270 <LCDinit>
	LCDcursorOFF();
 470:	0e 94 a0 01 	call	0x340	; 0x340 <LCDcursorOFF>
	LCDclr();				//clear the display
 474:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>
	LCDGotoXY(0,0);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
 480:	8c ec       	ldi	r24, 0xCC	; 204
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>
}
 48c:	08 95       	ret

0000048e <initialize>:

	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
}
void initialize(void) 
{
	TCCR0A = (1<<WGM01);	      // Set WGM bits to 010 to set desired mode (CTC mode, pg. 106)
 48e:	92 e0       	ldi	r25, 0x02	; 2
 490:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // Bits 0 and 1. Set timer 0 prescaler to 64
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); 		  // Bit 1: Enable compare match for timer0 interrupts
 496:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;				  // Set the compare register to 250 time ticks
 49a:	89 ef       	ldi	r24, 0xF9	; 249
 49c:	87 bd       	out	0x27, r24	; 39
	
	// Set up timer1 for full speed
	TCCR1B = (1<<ICES1)|(1<<CS00);  // Set capture to positive edge, and set timer1 for full speed
 49e:	81 e4       	ldi	r24, 0x41	; 65
 4a0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<ICIE1);            // Turn on timer1 interrupt-on-capture
 4a4:	80 e2       	ldi	r24, 0x20	; 32
 4a6:	80 93 6f 00 	sts	0x006F, r24

	ACSR = (1<<ACIC) ; 			// Set analog comp to connect to timer capture input
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	80 bf       	out	0x30, r24	; 48
	DDRB = 0;          			// Comparator negative input is B.3
 4ae:	14 b8       	out	0x04, r1	; 4

	//LCD init
	init_lcd();
 4b0:	0e 94 36 02 	call	0x46c	; 0x46c <init_lcd>
	LCDclr();
 4b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>

	CopyStringtoLCD(LCD_number, 0, 0);
 4b8:	8d ed       	ldi	r24, 0xDD	; 221
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>
	T1capture = 0;
 4c4:	10 92 18 01 	sts	0x0118, r1
 4c8:	10 92 17 01 	sts	0x0117, r1

	//set up the ports
  	DDRD |= 0x04;  // and d.2 which runs another LED
 4cc:	52 9a       	sbi	0x0a, 2	; 10
	sei();
 4ce:	78 94       	sei
}
 4d0:	08 95       	ret

000004d2 <task1>:
	initialize();
	while(1){if (time1==0){time1=t1; task1();}}		
}

void task1(void)
{
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
	DDRB=(0<<DDB3);	// Port b.3 is an input
 4d6:	14 b8       	out	0x04, r1	; 4
	DDRB=(1<<DDB2); // and port b.2 is an output
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	84 b9       	out	0x04, r24	; 4
	
	//Compute Capacitance
	capacitance = T1capture;///(11207.4); //amount of time for charging capacitance to comparator switch
 4dc:	80 91 17 01 	lds	r24, 0x0117
 4e0:	90 91 18 01 	lds	r25, 0x0118
 4e4:	90 93 1a 01 	sts	0x011A, r25
 4e8:	80 93 19 01 	sts	0x0119, r24
									  // Assuming R3/R3 + R4 ratio is 0.6 and the capicitance is between 1 nF and 100 nF
	//Update LCD	
	sprintf(lcd_buffer,"%-i",capacitance);
 4ec:	04 e0       	ldi	r16, 0x04	; 4
 4ee:	11 e0       	ldi	r17, 0x01	; 1
 4f0:	20 91 19 01 	lds	r18, 0x0119
 4f4:	30 91 1a 01 	lds	r19, 0x011A
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <task1+0x28>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <task1+0x2a>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <task1+0x2c>
 4fe:	ed b7       	in	r30, 0x3d	; 61
 500:	fe b7       	in	r31, 0x3e	; 62
 502:	31 96       	adiw	r30, 0x01	; 1
 504:	ad b7       	in	r26, 0x3d	; 61
 506:	be b7       	in	r27, 0x3e	; 62
 508:	12 96       	adiw	r26, 0x02	; 2
 50a:	1c 93       	st	X, r17
 50c:	0e 93       	st	-X, r16
 50e:	11 97       	sbiw	r26, 0x01	; 1
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	93 83       	std	Z+3, r25	; 0x03
 516:	82 83       	std	Z+2, r24	; 0x02
 518:	35 83       	std	Z+5, r19	; 0x05
 51a:	24 83       	std	Z+4, r18	; 0x04
 51c:	0e 94 df 02 	call	0x5be	; 0x5be <sprintf>
	LCDGotoXY(4, 0);
 520:	8d b7       	in	r24, 0x3d	; 61
 522:	9e b7       	in	r25, 0x3e	; 62
 524:	06 96       	adiw	r24, 0x06	; 6
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	9e bf       	out	0x3e, r25	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	8d bf       	out	0x3d, r24	; 61
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
  	// display the count 
	LCDstring(lcd_buffer, strlen(lcd_buffer));	
 538:	f8 01       	movw	r30, r16
 53a:	01 90       	ld	r0, Z+
 53c:	00 20       	and	r0, r0
 53e:	e9 f7       	brne	.-6      	; 0x53a <task1+0x68>
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	e0 1b       	sub	r30, r16
 544:	f1 0b       	sbc	r31, r17
 546:	c8 01       	movw	r24, r16
 548:	6e 2f       	mov	r22, r30
 54a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDstring>

	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
 54e:	14 b8       	out	0x04, r1	; 4
}
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	08 95       	ret

00000556 <main>:

void initialize(void); // Set up the MCU


int main(void)
{
 556:	1f 93       	push	r17
	initialize();
 558:	0e 94 47 02 	call	0x48e	; 0x48e <initialize>
	while(1){if (time1==0){time1=t1; task1();}}		
 55c:	18 ec       	ldi	r17, 0xC8	; 200
 55e:	80 91 16 01 	lds	r24, 0x0116
 562:	88 23       	and	r24, r24
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0x8>
 566:	10 93 16 01 	sts	0x0116, r17
 56a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <task1>
 56e:	f7 cf       	rjmp	.-18     	; 0x55e <main+0x8>

00000570 <__udivmodhi4>:
 570:	aa 1b       	sub	r26, r26
 572:	bb 1b       	sub	r27, r27
 574:	51 e1       	ldi	r21, 0x11	; 17
 576:	07 c0       	rjmp	.+14     	; 0x586 <__udivmodhi4_ep>

00000578 <__udivmodhi4_loop>:
 578:	aa 1f       	adc	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	a6 17       	cp	r26, r22
 57e:	b7 07       	cpc	r27, r23
 580:	10 f0       	brcs	.+4      	; 0x586 <__udivmodhi4_ep>
 582:	a6 1b       	sub	r26, r22
 584:	b7 0b       	sbc	r27, r23

00000586 <__udivmodhi4_ep>:
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	5a 95       	dec	r21
 58c:	a9 f7       	brne	.-22     	; 0x578 <__udivmodhi4_loop>
 58e:	80 95       	com	r24
 590:	90 95       	com	r25
 592:	bc 01       	movw	r22, r24
 594:	cd 01       	movw	r24, r26
 596:	08 95       	ret

00000598 <__divmodhi4>:
 598:	97 fb       	bst	r25, 7
 59a:	09 2e       	mov	r0, r25
 59c:	07 26       	eor	r0, r23
 59e:	0a d0       	rcall	.+20     	; 0x5b4 <__divmodhi4_neg1>
 5a0:	77 fd       	sbrc	r23, 7
 5a2:	04 d0       	rcall	.+8      	; 0x5ac <__divmodhi4_neg2>
 5a4:	e5 df       	rcall	.-54     	; 0x570 <__udivmodhi4>
 5a6:	06 d0       	rcall	.+12     	; 0x5b4 <__divmodhi4_neg1>
 5a8:	00 20       	and	r0, r0
 5aa:	1a f4       	brpl	.+6      	; 0x5b2 <__divmodhi4_exit>

000005ac <__divmodhi4_neg2>:
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255

000005b2 <__divmodhi4_exit>:
 5b2:	08 95       	ret

000005b4 <__divmodhi4_neg1>:
 5b4:	f6 f7       	brtc	.-4      	; 0x5b2 <__divmodhi4_exit>
 5b6:	90 95       	com	r25
 5b8:	81 95       	neg	r24
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <sprintf>:
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	2e 97       	sbiw	r28, 0x0e	; 14
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	0d 89       	ldd	r16, Y+21	; 0x15
 5d8:	1e 89       	ldd	r17, Y+22	; 0x16
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	8c 83       	std	Y+4, r24	; 0x04
 5de:	1a 83       	std	Y+2, r17	; 0x02
 5e0:	09 83       	std	Y+1, r16	; 0x01
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f e7       	ldi	r25, 0x7F	; 127
 5e6:	9e 83       	std	Y+6, r25	; 0x06
 5e8:	8d 83       	std	Y+5, r24	; 0x05
 5ea:	9e 01       	movw	r18, r28
 5ec:	27 5e       	subi	r18, 0xE7	; 231
 5ee:	3f 4f       	sbci	r19, 0xFF	; 255
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	6f 89       	ldd	r22, Y+23	; 0x17
 5f6:	78 8d       	ldd	r23, Y+24	; 0x18
 5f8:	a9 01       	movw	r20, r18
 5fa:	0e 94 10 03 	call	0x620	; 0x620 <vfprintf>
 5fe:	2f 81       	ldd	r18, Y+7	; 0x07
 600:	38 85       	ldd	r19, Y+8	; 0x08
 602:	02 0f       	add	r16, r18
 604:	13 1f       	adc	r17, r19
 606:	f8 01       	movw	r30, r16
 608:	10 82       	st	Z, r1
 60a:	2e 96       	adiw	r28, 0x0e	; 14
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
 616:	cf 91       	pop	r28
 618:	df 91       	pop	r29
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	08 95       	ret

00000620 <vfprintf>:
 620:	2f 92       	push	r2
 622:	3f 92       	push	r3
 624:	4f 92       	push	r4
 626:	5f 92       	push	r5
 628:	6f 92       	push	r6
 62a:	7f 92       	push	r7
 62c:	8f 92       	push	r8
 62e:	9f 92       	push	r9
 630:	af 92       	push	r10
 632:	bf 92       	push	r11
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	df 93       	push	r29
 642:	cf 93       	push	r28
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	2b 97       	sbiw	r28, 0x0b	; 11
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	3c 01       	movw	r6, r24
 656:	2b 01       	movw	r4, r22
 658:	5a 01       	movw	r10, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 fd       	sbrc	r24, 1
 664:	03 c0       	rjmp	.+6      	; 0x66c <vfprintf+0x4c>
 666:	6f ef       	ldi	r22, 0xFF	; 255
 668:	7f ef       	ldi	r23, 0xFF	; 255
 66a:	c6 c1       	rjmp	.+908    	; 0x9f8 <vfprintf+0x3d8>
 66c:	9a e0       	ldi	r25, 0x0A	; 10
 66e:	89 2e       	mov	r8, r25
 670:	1e 01       	movw	r2, r28
 672:	08 94       	sec
 674:	21 1c       	adc	r2, r1
 676:	31 1c       	adc	r3, r1
 678:	f3 01       	movw	r30, r6
 67a:	23 81       	ldd	r18, Z+3	; 0x03
 67c:	f2 01       	movw	r30, r4
 67e:	23 fd       	sbrc	r18, 3
 680:	85 91       	lpm	r24, Z+
 682:	23 ff       	sbrs	r18, 3
 684:	81 91       	ld	r24, Z+
 686:	2f 01       	movw	r4, r30
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <vfprintf+0x6e>
 68c:	b2 c1       	rjmp	.+868    	; 0x9f2 <vfprintf+0x3d2>
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	39 f4       	brne	.+14     	; 0x6a0 <vfprintf+0x80>
 692:	23 fd       	sbrc	r18, 3
 694:	85 91       	lpm	r24, Z+
 696:	23 ff       	sbrs	r18, 3
 698:	81 91       	ld	r24, Z+
 69a:	2f 01       	movw	r4, r30
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	29 f4       	brne	.+10     	; 0x6aa <vfprintf+0x8a>
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	b3 01       	movw	r22, r6
 6a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 6a8:	e7 cf       	rjmp	.-50     	; 0x678 <vfprintf+0x58>
 6aa:	98 2f       	mov	r25, r24
 6ac:	ff 24       	eor	r15, r15
 6ae:	ee 24       	eor	r14, r14
 6b0:	99 24       	eor	r9, r9
 6b2:	ff e1       	ldi	r31, 0x1F	; 31
 6b4:	ff 15       	cp	r31, r15
 6b6:	d0 f0       	brcs	.+52     	; 0x6ec <vfprintf+0xcc>
 6b8:	9b 32       	cpi	r25, 0x2B	; 43
 6ba:	69 f0       	breq	.+26     	; 0x6d6 <vfprintf+0xb6>
 6bc:	9c 32       	cpi	r25, 0x2C	; 44
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0xaa>
 6c0:	90 32       	cpi	r25, 0x20	; 32
 6c2:	59 f0       	breq	.+22     	; 0x6da <vfprintf+0xba>
 6c4:	93 32       	cpi	r25, 0x23	; 35
 6c6:	91 f4       	brne	.+36     	; 0x6ec <vfprintf+0xcc>
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <vfprintf+0xc6>
 6ca:	9d 32       	cpi	r25, 0x2D	; 45
 6cc:	49 f0       	breq	.+18     	; 0x6e0 <vfprintf+0xc0>
 6ce:	90 33       	cpi	r25, 0x30	; 48
 6d0:	69 f4       	brne	.+26     	; 0x6ec <vfprintf+0xcc>
 6d2:	41 e0       	ldi	r20, 0x01	; 1
 6d4:	24 c0       	rjmp	.+72     	; 0x71e <vfprintf+0xfe>
 6d6:	52 e0       	ldi	r21, 0x02	; 2
 6d8:	f5 2a       	or	r15, r21
 6da:	84 e0       	ldi	r24, 0x04	; 4
 6dc:	f8 2a       	or	r15, r24
 6de:	28 c0       	rjmp	.+80     	; 0x730 <vfprintf+0x110>
 6e0:	98 e0       	ldi	r25, 0x08	; 8
 6e2:	f9 2a       	or	r15, r25
 6e4:	25 c0       	rjmp	.+74     	; 0x730 <vfprintf+0x110>
 6e6:	e0 e1       	ldi	r30, 0x10	; 16
 6e8:	fe 2a       	or	r15, r30
 6ea:	22 c0       	rjmp	.+68     	; 0x730 <vfprintf+0x110>
 6ec:	f7 fc       	sbrc	r15, 7
 6ee:	29 c0       	rjmp	.+82     	; 0x742 <vfprintf+0x122>
 6f0:	89 2f       	mov	r24, r25
 6f2:	80 53       	subi	r24, 0x30	; 48
 6f4:	8a 30       	cpi	r24, 0x0A	; 10
 6f6:	70 f4       	brcc	.+28     	; 0x714 <vfprintf+0xf4>
 6f8:	f6 fe       	sbrs	r15, 6
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <vfprintf+0xe6>
 6fc:	98 9c       	mul	r9, r8
 6fe:	90 2c       	mov	r9, r0
 700:	11 24       	eor	r1, r1
 702:	98 0e       	add	r9, r24
 704:	15 c0       	rjmp	.+42     	; 0x730 <vfprintf+0x110>
 706:	e8 9c       	mul	r14, r8
 708:	e0 2c       	mov	r14, r0
 70a:	11 24       	eor	r1, r1
 70c:	e8 0e       	add	r14, r24
 70e:	f0 e2       	ldi	r31, 0x20	; 32
 710:	ff 2a       	or	r15, r31
 712:	0e c0       	rjmp	.+28     	; 0x730 <vfprintf+0x110>
 714:	9e 32       	cpi	r25, 0x2E	; 46
 716:	29 f4       	brne	.+10     	; 0x722 <vfprintf+0x102>
 718:	f6 fc       	sbrc	r15, 6
 71a:	6b c1       	rjmp	.+726    	; 0x9f2 <vfprintf+0x3d2>
 71c:	40 e4       	ldi	r20, 0x40	; 64
 71e:	f4 2a       	or	r15, r20
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0x110>
 722:	9c 36       	cpi	r25, 0x6C	; 108
 724:	19 f4       	brne	.+6      	; 0x72c <vfprintf+0x10c>
 726:	50 e8       	ldi	r21, 0x80	; 128
 728:	f5 2a       	or	r15, r21
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x110>
 72c:	98 36       	cpi	r25, 0x68	; 104
 72e:	49 f4       	brne	.+18     	; 0x742 <vfprintf+0x122>
 730:	f2 01       	movw	r30, r4
 732:	23 fd       	sbrc	r18, 3
 734:	95 91       	lpm	r25, Z+
 736:	23 ff       	sbrs	r18, 3
 738:	91 91       	ld	r25, Z+
 73a:	2f 01       	movw	r4, r30
 73c:	99 23       	and	r25, r25
 73e:	09 f0       	breq	.+2      	; 0x742 <vfprintf+0x122>
 740:	b8 cf       	rjmp	.-144    	; 0x6b2 <vfprintf+0x92>
 742:	89 2f       	mov	r24, r25
 744:	85 54       	subi	r24, 0x45	; 69
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	18 f0       	brcs	.+6      	; 0x750 <vfprintf+0x130>
 74a:	80 52       	subi	r24, 0x20	; 32
 74c:	83 30       	cpi	r24, 0x03	; 3
 74e:	38 f4       	brcc	.+14     	; 0x75e <vfprintf+0x13e>
 750:	44 e0       	ldi	r20, 0x04	; 4
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	a4 0e       	add	r10, r20
 756:	b5 1e       	adc	r11, r21
 758:	5f e3       	ldi	r21, 0x3F	; 63
 75a:	59 83       	std	Y+1, r21	; 0x01
 75c:	0f c0       	rjmp	.+30     	; 0x77c <vfprintf+0x15c>
 75e:	93 36       	cpi	r25, 0x63	; 99
 760:	31 f0       	breq	.+12     	; 0x76e <vfprintf+0x14e>
 762:	93 37       	cpi	r25, 0x73	; 115
 764:	79 f0       	breq	.+30     	; 0x784 <vfprintf+0x164>
 766:	93 35       	cpi	r25, 0x53	; 83
 768:	09 f0       	breq	.+2      	; 0x76c <vfprintf+0x14c>
 76a:	56 c0       	rjmp	.+172    	; 0x818 <vfprintf+0x1f8>
 76c:	20 c0       	rjmp	.+64     	; 0x7ae <vfprintf+0x18e>
 76e:	f5 01       	movw	r30, r10
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	42 e0       	ldi	r20, 0x02	; 2
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	a4 0e       	add	r10, r20
 77a:	b5 1e       	adc	r11, r21
 77c:	61 01       	movw	r12, r2
 77e:	01 e0       	ldi	r16, 0x01	; 1
 780:	10 e0       	ldi	r17, 0x00	; 0
 782:	12 c0       	rjmp	.+36     	; 0x7a8 <vfprintf+0x188>
 784:	f5 01       	movw	r30, r10
 786:	c0 80       	ld	r12, Z
 788:	d1 80       	ldd	r13, Z+1	; 0x01
 78a:	f6 fc       	sbrc	r15, 6
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x174>
 78e:	6f ef       	ldi	r22, 0xFF	; 255
 790:	7f ef       	ldi	r23, 0xFF	; 255
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x178>
 794:	69 2d       	mov	r22, r9
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	42 e0       	ldi	r20, 0x02	; 2
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	a4 0e       	add	r10, r20
 79e:	b5 1e       	adc	r11, r21
 7a0:	c6 01       	movw	r24, r12
 7a2:	0e 94 21 05 	call	0xa42	; 0xa42 <strnlen>
 7a6:	8c 01       	movw	r16, r24
 7a8:	5f e7       	ldi	r21, 0x7F	; 127
 7aa:	f5 22       	and	r15, r21
 7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <vfprintf+0x1b6>
 7ae:	f5 01       	movw	r30, r10
 7b0:	c0 80       	ld	r12, Z
 7b2:	d1 80       	ldd	r13, Z+1	; 0x01
 7b4:	f6 fc       	sbrc	r15, 6
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <vfprintf+0x19e>
 7b8:	6f ef       	ldi	r22, 0xFF	; 255
 7ba:	7f ef       	ldi	r23, 0xFF	; 255
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x1a2>
 7be:	69 2d       	mov	r22, r9
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	42 e0       	ldi	r20, 0x02	; 2
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	a4 0e       	add	r10, r20
 7c8:	b5 1e       	adc	r11, r21
 7ca:	c6 01       	movw	r24, r12
 7cc:	0e 94 16 05 	call	0xa2c	; 0xa2c <strnlen_P>
 7d0:	8c 01       	movw	r16, r24
 7d2:	50 e8       	ldi	r21, 0x80	; 128
 7d4:	f5 2a       	or	r15, r21
 7d6:	f3 fe       	sbrs	r15, 3
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <vfprintf+0x1c8>
 7da:	1a c0       	rjmp	.+52     	; 0x810 <vfprintf+0x1f0>
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	b3 01       	movw	r22, r6
 7e2:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 7e6:	ea 94       	dec	r14
 7e8:	8e 2d       	mov	r24, r14
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	08 17       	cp	r16, r24
 7ee:	19 07       	cpc	r17, r25
 7f0:	a8 f3       	brcs	.-22     	; 0x7dc <vfprintf+0x1bc>
 7f2:	0e c0       	rjmp	.+28     	; 0x810 <vfprintf+0x1f0>
 7f4:	f6 01       	movw	r30, r12
 7f6:	f7 fc       	sbrc	r15, 7
 7f8:	85 91       	lpm	r24, Z+
 7fa:	f7 fe       	sbrs	r15, 7
 7fc:	81 91       	ld	r24, Z+
 7fe:	6f 01       	movw	r12, r30
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	b3 01       	movw	r22, r6
 804:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 808:	e1 10       	cpse	r14, r1
 80a:	ea 94       	dec	r14
 80c:	01 50       	subi	r16, 0x01	; 1
 80e:	10 40       	sbci	r17, 0x00	; 0
 810:	01 15       	cp	r16, r1
 812:	11 05       	cpc	r17, r1
 814:	79 f7       	brne	.-34     	; 0x7f4 <vfprintf+0x1d4>
 816:	ea c0       	rjmp	.+468    	; 0x9ec <vfprintf+0x3cc>
 818:	94 36       	cpi	r25, 0x64	; 100
 81a:	11 f0       	breq	.+4      	; 0x820 <vfprintf+0x200>
 81c:	99 36       	cpi	r25, 0x69	; 105
 81e:	69 f5       	brne	.+90     	; 0x87a <vfprintf+0x25a>
 820:	f7 fe       	sbrs	r15, 7
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0x214>
 824:	f5 01       	movw	r30, r10
 826:	20 81       	ld	r18, Z
 828:	31 81       	ldd	r19, Z+1	; 0x01
 82a:	42 81       	ldd	r20, Z+2	; 0x02
 82c:	53 81       	ldd	r21, Z+3	; 0x03
 82e:	84 e0       	ldi	r24, 0x04	; 4
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x228>
 834:	f5 01       	movw	r30, r10
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	9c 01       	movw	r18, r24
 83c:	44 27       	eor	r20, r20
 83e:	37 fd       	sbrc	r19, 7
 840:	40 95       	com	r20
 842:	54 2f       	mov	r21, r20
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a8 0e       	add	r10, r24
 84a:	b9 1e       	adc	r11, r25
 84c:	9f e6       	ldi	r25, 0x6F	; 111
 84e:	f9 22       	and	r15, r25
 850:	57 ff       	sbrs	r21, 7
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x246>
 854:	50 95       	com	r21
 856:	40 95       	com	r20
 858:	30 95       	com	r19
 85a:	21 95       	neg	r18
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
 85e:	4f 4f       	sbci	r20, 0xFF	; 255
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	fe 2a       	or	r15, r30
 866:	ca 01       	movw	r24, r20
 868:	b9 01       	movw	r22, r18
 86a:	a1 01       	movw	r20, r2
 86c:	2a e0       	ldi	r18, 0x0A	; 10
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	0e 94 58 05 	call	0xab0	; 0xab0 <__ultoa_invert>
 874:	d8 2e       	mov	r13, r24
 876:	d2 18       	sub	r13, r2
 878:	40 c0       	rjmp	.+128    	; 0x8fa <vfprintf+0x2da>
 87a:	95 37       	cpi	r25, 0x75	; 117
 87c:	29 f4       	brne	.+10     	; 0x888 <vfprintf+0x268>
 87e:	1f 2d       	mov	r17, r15
 880:	1f 7e       	andi	r17, 0xEF	; 239
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	1d c0       	rjmp	.+58     	; 0x8c2 <vfprintf+0x2a2>
 888:	1f 2d       	mov	r17, r15
 88a:	19 7f       	andi	r17, 0xF9	; 249
 88c:	9f 36       	cpi	r25, 0x6F	; 111
 88e:	61 f0       	breq	.+24     	; 0x8a8 <vfprintf+0x288>
 890:	90 37       	cpi	r25, 0x70	; 112
 892:	20 f4       	brcc	.+8      	; 0x89c <vfprintf+0x27c>
 894:	98 35       	cpi	r25, 0x58	; 88
 896:	09 f0       	breq	.+2      	; 0x89a <vfprintf+0x27a>
 898:	ac c0       	rjmp	.+344    	; 0x9f2 <vfprintf+0x3d2>
 89a:	0f c0       	rjmp	.+30     	; 0x8ba <vfprintf+0x29a>
 89c:	90 37       	cpi	r25, 0x70	; 112
 89e:	39 f0       	breq	.+14     	; 0x8ae <vfprintf+0x28e>
 8a0:	98 37       	cpi	r25, 0x78	; 120
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <vfprintf+0x286>
 8a4:	a6 c0       	rjmp	.+332    	; 0x9f2 <vfprintf+0x3d2>
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <vfprintf+0x290>
 8a8:	28 e0       	ldi	r18, 0x08	; 8
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <vfprintf+0x2a2>
 8ae:	10 61       	ori	r17, 0x10	; 16
 8b0:	14 fd       	sbrc	r17, 4
 8b2:	14 60       	ori	r17, 0x04	; 4
 8b4:	20 e1       	ldi	r18, 0x10	; 16
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <vfprintf+0x2a2>
 8ba:	14 fd       	sbrc	r17, 4
 8bc:	16 60       	ori	r17, 0x06	; 6
 8be:	20 e1       	ldi	r18, 0x10	; 16
 8c0:	32 e0       	ldi	r19, 0x02	; 2
 8c2:	17 ff       	sbrs	r17, 7
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x2b6>
 8c6:	f5 01       	movw	r30, r10
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	82 81       	ldd	r24, Z+2	; 0x02
 8ce:	93 81       	ldd	r25, Z+3	; 0x03
 8d0:	44 e0       	ldi	r20, 0x04	; 4
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <vfprintf+0x2c6>
 8d6:	f5 01       	movw	r30, r10
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	bc 01       	movw	r22, r24
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	a4 0e       	add	r10, r20
 8e8:	b5 1e       	adc	r11, r21
 8ea:	a1 01       	movw	r20, r2
 8ec:	0e 94 58 05 	call	0xab0	; 0xab0 <__ultoa_invert>
 8f0:	d8 2e       	mov	r13, r24
 8f2:	d2 18       	sub	r13, r2
 8f4:	8f e7       	ldi	r24, 0x7F	; 127
 8f6:	f8 2e       	mov	r15, r24
 8f8:	f1 22       	and	r15, r17
 8fa:	f6 fe       	sbrs	r15, 6
 8fc:	0b c0       	rjmp	.+22     	; 0x914 <vfprintf+0x2f4>
 8fe:	5e ef       	ldi	r21, 0xFE	; 254
 900:	f5 22       	and	r15, r21
 902:	d9 14       	cp	r13, r9
 904:	38 f4       	brcc	.+14     	; 0x914 <vfprintf+0x2f4>
 906:	f4 fe       	sbrs	r15, 4
 908:	07 c0       	rjmp	.+14     	; 0x918 <vfprintf+0x2f8>
 90a:	f2 fc       	sbrc	r15, 2
 90c:	05 c0       	rjmp	.+10     	; 0x918 <vfprintf+0x2f8>
 90e:	8f ee       	ldi	r24, 0xEF	; 239
 910:	f8 22       	and	r15, r24
 912:	02 c0       	rjmp	.+4      	; 0x918 <vfprintf+0x2f8>
 914:	1d 2d       	mov	r17, r13
 916:	01 c0       	rjmp	.+2      	; 0x91a <vfprintf+0x2fa>
 918:	19 2d       	mov	r17, r9
 91a:	f4 fe       	sbrs	r15, 4
 91c:	0d c0       	rjmp	.+26     	; 0x938 <vfprintf+0x318>
 91e:	fe 01       	movw	r30, r28
 920:	ed 0d       	add	r30, r13
 922:	f1 1d       	adc	r31, r1
 924:	80 81       	ld	r24, Z
 926:	80 33       	cpi	r24, 0x30	; 48
 928:	19 f4       	brne	.+6      	; 0x930 <vfprintf+0x310>
 92a:	99 ee       	ldi	r25, 0xE9	; 233
 92c:	f9 22       	and	r15, r25
 92e:	08 c0       	rjmp	.+16     	; 0x940 <vfprintf+0x320>
 930:	1f 5f       	subi	r17, 0xFF	; 255
 932:	f2 fe       	sbrs	r15, 2
 934:	05 c0       	rjmp	.+10     	; 0x940 <vfprintf+0x320>
 936:	03 c0       	rjmp	.+6      	; 0x93e <vfprintf+0x31e>
 938:	8f 2d       	mov	r24, r15
 93a:	86 78       	andi	r24, 0x86	; 134
 93c:	09 f0       	breq	.+2      	; 0x940 <vfprintf+0x320>
 93e:	1f 5f       	subi	r17, 0xFF	; 255
 940:	0f 2d       	mov	r16, r15
 942:	f3 fc       	sbrc	r15, 3
 944:	14 c0       	rjmp	.+40     	; 0x96e <vfprintf+0x34e>
 946:	f0 fe       	sbrs	r15, 0
 948:	0f c0       	rjmp	.+30     	; 0x968 <vfprintf+0x348>
 94a:	1e 15       	cp	r17, r14
 94c:	10 f0       	brcs	.+4      	; 0x952 <vfprintf+0x332>
 94e:	9d 2c       	mov	r9, r13
 950:	0b c0       	rjmp	.+22     	; 0x968 <vfprintf+0x348>
 952:	9d 2c       	mov	r9, r13
 954:	9e 0c       	add	r9, r14
 956:	91 1a       	sub	r9, r17
 958:	1e 2d       	mov	r17, r14
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfprintf+0x348>
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	b3 01       	movw	r22, r6
 962:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 966:	1f 5f       	subi	r17, 0xFF	; 255
 968:	1e 15       	cp	r17, r14
 96a:	c0 f3       	brcs	.-16     	; 0x95c <vfprintf+0x33c>
 96c:	04 c0       	rjmp	.+8      	; 0x976 <vfprintf+0x356>
 96e:	1e 15       	cp	r17, r14
 970:	10 f4       	brcc	.+4      	; 0x976 <vfprintf+0x356>
 972:	e1 1a       	sub	r14, r17
 974:	01 c0       	rjmp	.+2      	; 0x978 <vfprintf+0x358>
 976:	ee 24       	eor	r14, r14
 978:	04 ff       	sbrs	r16, 4
 97a:	0f c0       	rjmp	.+30     	; 0x99a <vfprintf+0x37a>
 97c:	80 e3       	ldi	r24, 0x30	; 48
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	b3 01       	movw	r22, r6
 982:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 986:	02 ff       	sbrs	r16, 2
 988:	1d c0       	rjmp	.+58     	; 0x9c4 <vfprintf+0x3a4>
 98a:	01 fd       	sbrc	r16, 1
 98c:	03 c0       	rjmp	.+6      	; 0x994 <vfprintf+0x374>
 98e:	88 e7       	ldi	r24, 0x78	; 120
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <vfprintf+0x390>
 994:	88 e5       	ldi	r24, 0x58	; 88
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0b c0       	rjmp	.+22     	; 0x9b0 <vfprintf+0x390>
 99a:	80 2f       	mov	r24, r16
 99c:	86 78       	andi	r24, 0x86	; 134
 99e:	91 f0       	breq	.+36     	; 0x9c4 <vfprintf+0x3a4>
 9a0:	01 ff       	sbrs	r16, 1
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <vfprintf+0x388>
 9a4:	8b e2       	ldi	r24, 0x2B	; 43
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <vfprintf+0x38a>
 9a8:	80 e2       	ldi	r24, 0x20	; 32
 9aa:	f7 fc       	sbrc	r15, 7
 9ac:	8d e2       	ldi	r24, 0x2D	; 45
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	b3 01       	movw	r22, r6
 9b2:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <vfprintf+0x3a4>
 9b8:	80 e3       	ldi	r24, 0x30	; 48
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	b3 01       	movw	r22, r6
 9be:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9c2:	9a 94       	dec	r9
 9c4:	d9 14       	cp	r13, r9
 9c6:	c0 f3       	brcs	.-16     	; 0x9b8 <vfprintf+0x398>
 9c8:	da 94       	dec	r13
 9ca:	f1 01       	movw	r30, r2
 9cc:	ed 0d       	add	r30, r13
 9ce:	f1 1d       	adc	r31, r1
 9d0:	80 81       	ld	r24, Z
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b3 01       	movw	r22, r6
 9d6:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9da:	dd 20       	and	r13, r13
 9dc:	a9 f7       	brne	.-22     	; 0x9c8 <vfprintf+0x3a8>
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <vfprintf+0x3cc>
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	b3 01       	movw	r22, r6
 9e6:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9ea:	ea 94       	dec	r14
 9ec:	ee 20       	and	r14, r14
 9ee:	c1 f7       	brne	.-16     	; 0x9e0 <vfprintf+0x3c0>
 9f0:	43 ce       	rjmp	.-890    	; 0x678 <vfprintf+0x58>
 9f2:	f3 01       	movw	r30, r6
 9f4:	66 81       	ldd	r22, Z+6	; 0x06
 9f6:	77 81       	ldd	r23, Z+7	; 0x07
 9f8:	cb 01       	movw	r24, r22
 9fa:	2b 96       	adiw	r28, 0x0b	; 11
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	cf 91       	pop	r28
 a08:	df 91       	pop	r29
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	ff 90       	pop	r15
 a10:	ef 90       	pop	r14
 a12:	df 90       	pop	r13
 a14:	cf 90       	pop	r12
 a16:	bf 90       	pop	r11
 a18:	af 90       	pop	r10
 a1a:	9f 90       	pop	r9
 a1c:	8f 90       	pop	r8
 a1e:	7f 90       	pop	r7
 a20:	6f 90       	pop	r6
 a22:	5f 90       	pop	r5
 a24:	4f 90       	pop	r4
 a26:	3f 90       	pop	r3
 a28:	2f 90       	pop	r2
 a2a:	08 95       	ret

00000a2c <strnlen_P>:
 a2c:	fc 01       	movw	r30, r24
 a2e:	05 90       	lpm	r0, Z+
 a30:	61 50       	subi	r22, 0x01	; 1
 a32:	70 40       	sbci	r23, 0x00	; 0
 a34:	01 10       	cpse	r0, r1
 a36:	d8 f7       	brcc	.-10     	; 0xa2e <strnlen_P+0x2>
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	8e 0f       	add	r24, r30
 a3e:	9f 1f       	adc	r25, r31
 a40:	08 95       	ret

00000a42 <strnlen>:
 a42:	fc 01       	movw	r30, r24
 a44:	61 50       	subi	r22, 0x01	; 1
 a46:	70 40       	sbci	r23, 0x00	; 0
 a48:	01 90       	ld	r0, Z+
 a4a:	01 10       	cpse	r0, r1
 a4c:	d8 f7       	brcc	.-10     	; 0xa44 <strnlen+0x2>
 a4e:	80 95       	com	r24
 a50:	90 95       	com	r25
 a52:	8e 0f       	add	r24, r30
 a54:	9f 1f       	adc	r25, r31
 a56:	08 95       	ret

00000a58 <fputc>:
 a58:	0f 93       	push	r16
 a5a:	1f 93       	push	r17
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	8c 01       	movw	r16, r24
 a62:	eb 01       	movw	r28, r22
 a64:	8b 81       	ldd	r24, Y+3	; 0x03
 a66:	81 ff       	sbrs	r24, 1
 a68:	1b c0       	rjmp	.+54     	; 0xaa0 <fputc+0x48>
 a6a:	82 ff       	sbrs	r24, 2
 a6c:	0d c0       	rjmp	.+26     	; 0xa88 <fputc+0x30>
 a6e:	2e 81       	ldd	r18, Y+6	; 0x06
 a70:	3f 81       	ldd	r19, Y+7	; 0x07
 a72:	8c 81       	ldd	r24, Y+4	; 0x04
 a74:	9d 81       	ldd	r25, Y+5	; 0x05
 a76:	28 17       	cp	r18, r24
 a78:	39 07       	cpc	r19, r25
 a7a:	64 f4       	brge	.+24     	; 0xa94 <fputc+0x3c>
 a7c:	e8 81       	ld	r30, Y
 a7e:	f9 81       	ldd	r31, Y+1	; 0x01
 a80:	01 93       	st	Z+, r16
 a82:	f9 83       	std	Y+1, r31	; 0x01
 a84:	e8 83       	st	Y, r30
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <fputc+0x3c>
 a88:	e8 85       	ldd	r30, Y+8	; 0x08
 a8a:	f9 85       	ldd	r31, Y+9	; 0x09
 a8c:	80 2f       	mov	r24, r16
 a8e:	09 95       	icall
 a90:	89 2b       	or	r24, r25
 a92:	31 f4       	brne	.+12     	; 0xaa0 <fputc+0x48>
 a94:	8e 81       	ldd	r24, Y+6	; 0x06
 a96:	9f 81       	ldd	r25, Y+7	; 0x07
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	9f 83       	std	Y+7, r25	; 0x07
 a9c:	8e 83       	std	Y+6, r24	; 0x06
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <fputc+0x4c>
 aa0:	0f ef       	ldi	r16, 0xFF	; 255
 aa2:	1f ef       	ldi	r17, 0xFF	; 255
 aa4:	c8 01       	movw	r24, r16
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	1f 91       	pop	r17
 aac:	0f 91       	pop	r16
 aae:	08 95       	ret

00000ab0 <__ultoa_invert>:
 ab0:	fa 01       	movw	r30, r20
 ab2:	aa 27       	eor	r26, r26
 ab4:	28 30       	cpi	r18, 0x08	; 8
 ab6:	51 f1       	breq	.+84     	; 0xb0c <__ultoa_invert+0x5c>
 ab8:	20 31       	cpi	r18, 0x10	; 16
 aba:	81 f1       	breq	.+96     	; 0xb1c <__ultoa_invert+0x6c>
 abc:	e8 94       	clt
 abe:	6f 93       	push	r22
 ac0:	6e 7f       	andi	r22, 0xFE	; 254
 ac2:	6e 5f       	subi	r22, 0xFE	; 254
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	af 4f       	sbci	r26, 0xFF	; 255
 acc:	b1 e0       	ldi	r27, 0x01	; 1
 ace:	3e d0       	rcall	.+124    	; 0xb4c <__ultoa_invert+0x9c>
 ad0:	b4 e0       	ldi	r27, 0x04	; 4
 ad2:	3c d0       	rcall	.+120    	; 0xb4c <__ultoa_invert+0x9c>
 ad4:	67 0f       	add	r22, r23
 ad6:	78 1f       	adc	r23, r24
 ad8:	89 1f       	adc	r24, r25
 ada:	9a 1f       	adc	r25, r26
 adc:	a1 1d       	adc	r26, r1
 ade:	68 0f       	add	r22, r24
 ae0:	79 1f       	adc	r23, r25
 ae2:	8a 1f       	adc	r24, r26
 ae4:	91 1d       	adc	r25, r1
 ae6:	a1 1d       	adc	r26, r1
 ae8:	6a 0f       	add	r22, r26
 aea:	71 1d       	adc	r23, r1
 aec:	81 1d       	adc	r24, r1
 aee:	91 1d       	adc	r25, r1
 af0:	a1 1d       	adc	r26, r1
 af2:	20 d0       	rcall	.+64     	; 0xb34 <__ultoa_invert+0x84>
 af4:	09 f4       	brne	.+2      	; 0xaf8 <__ultoa_invert+0x48>
 af6:	68 94       	set
 af8:	3f 91       	pop	r19
 afa:	2a e0       	ldi	r18, 0x0A	; 10
 afc:	26 9f       	mul	r18, r22
 afe:	11 24       	eor	r1, r1
 b00:	30 19       	sub	r19, r0
 b02:	30 5d       	subi	r19, 0xD0	; 208
 b04:	31 93       	st	Z+, r19
 b06:	de f6       	brtc	.-74     	; 0xabe <__ultoa_invert+0xe>
 b08:	cf 01       	movw	r24, r30
 b0a:	08 95       	ret
 b0c:	46 2f       	mov	r20, r22
 b0e:	47 70       	andi	r20, 0x07	; 7
 b10:	40 5d       	subi	r20, 0xD0	; 208
 b12:	41 93       	st	Z+, r20
 b14:	b3 e0       	ldi	r27, 0x03	; 3
 b16:	0f d0       	rcall	.+30     	; 0xb36 <__ultoa_invert+0x86>
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0x5c>
 b1a:	f6 cf       	rjmp	.-20     	; 0xb08 <__ultoa_invert+0x58>
 b1c:	46 2f       	mov	r20, r22
 b1e:	4f 70       	andi	r20, 0x0F	; 15
 b20:	40 5d       	subi	r20, 0xD0	; 208
 b22:	4a 33       	cpi	r20, 0x3A	; 58
 b24:	18 f0       	brcs	.+6      	; 0xb2c <__ultoa_invert+0x7c>
 b26:	49 5d       	subi	r20, 0xD9	; 217
 b28:	31 fd       	sbrc	r19, 1
 b2a:	40 52       	subi	r20, 0x20	; 32
 b2c:	41 93       	st	Z+, r20
 b2e:	02 d0       	rcall	.+4      	; 0xb34 <__ultoa_invert+0x84>
 b30:	a9 f7       	brne	.-22     	; 0xb1c <__ultoa_invert+0x6c>
 b32:	ea cf       	rjmp	.-44     	; 0xb08 <__ultoa_invert+0x58>
 b34:	b4 e0       	ldi	r27, 0x04	; 4
 b36:	a6 95       	lsr	r26
 b38:	97 95       	ror	r25
 b3a:	87 95       	ror	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	ba 95       	dec	r27
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__ultoa_invert+0x86>
 b44:	00 97       	sbiw	r24, 0x00	; 0
 b46:	61 05       	cpc	r22, r1
 b48:	71 05       	cpc	r23, r1
 b4a:	08 95       	ret
 b4c:	9b 01       	movw	r18, r22
 b4e:	ac 01       	movw	r20, r24
 b50:	0a 2e       	mov	r0, r26
 b52:	06 94       	lsr	r0
 b54:	57 95       	ror	r21
 b56:	47 95       	ror	r20
 b58:	37 95       	ror	r19
 b5a:	27 95       	ror	r18
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__ultoa_invert+0xa2>
 b60:	62 0f       	add	r22, r18
 b62:	73 1f       	adc	r23, r19
 b64:	84 1f       	adc	r24, r20
 b66:	95 1f       	adc	r25, r21
 b68:	a0 1d       	adc	r26, r0
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>
