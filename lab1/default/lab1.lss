
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800104  00800104  00000c2c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000251  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ad  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072f  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000284  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_12>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_16>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

0000008c <LcdCustomChar>:
  8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <LCD_initialize>:
  cc:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 00     LCD Initialized.
	...

000000dd <LCD_number>:
  dd:	43 61 70 3d 00 00 00                                Cap=...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d0 e4       	ldi	r29, 0x40	; 64
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	e4 e9       	ldi	r30, 0x94	; 148
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 30       	cpi	r26, 0x04	; 4
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a4 e0       	ldi	r26, 0x04	; 4
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	af 31       	cpi	r26, 0x1F	; 31
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
 11e:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 126:	28 2f       	mov	r18, r24
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
 12c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 12e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 130:	20 e4       	ldi	r18, 0x40	; 64
 132:	3f e1       	ldi	r19, 0x1F	; 31
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 13a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	44 e0       	ldi	r20, 0x04	; 4
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	4a 95       	dec	r20
 14e:	e1 f7       	brne	.-8      	; 0x148 <LCDsendChar+0x22>
 150:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
 152:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 154:	42 9a       	sbi	0x08, 2	; 8
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
 15c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 15e:	40 98       	cbi	0x08, 0	; 8
 160:	c9 01       	movw	r24, r18
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
 166:	08 95       	ret

00000168 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 168:	28 2f       	mov	r18, r24
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
 16e:	42 9a       	sbi	0x08, 2	; 8
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	3f e1       	ldi	r19, 0x1F	; 31
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 17a:	42 98       	cbi	0x08, 2	; 8
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCDsendCommand+0x1e>
 18e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	c9 01       	movw	r24, r18
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	c9 01       	movw	r24, r18
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
 1a0:	08 95       	ret

000001a2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1a8:	08 95       	ret

000001aa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 1b0:	08 95       	ret

000001b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	49 f0       	breq	.+18     	; 0x1d2 <LCDstring+0x20>
 1c0:	ec 01       	movw	r28, r24
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1c6:	89 91       	ld	r24, Y+
 1c8:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
 1ce:	10 17       	cp	r17, r16
 1d0:	d0 f3       	brcs	.-12     	; 0x1c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1dc:	62 30       	cpi	r22, 0x02	; 2
 1de:	31 f0       	breq	.+12     	; 0x1ec <LCDGotoXY+0x10>
 1e0:	63 30       	cpi	r22, 0x03	; 3
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <LCDGotoXY+0x14>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1e8:	80 5c       	subi	r24, 0xC0	; 192
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ec:	8c 5e       	subi	r24, 0xEC	; 236
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1f0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
	
}
 1f8:	08 95       	ret

000001fa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 204:	64 2f       	mov	r22, r20
 206:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 20e:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 212:	1f 5f       	subi	r17, 0xFF	; 255
 214:	fe 01       	movw	r30, r28
 216:	e1 0f       	add	r30, r17
 218:	f1 1d       	adc	r31, r1
 21a:	84 91       	lpm	r24, Z+
 21c:	88 23       	and	r24, r24
 21e:	b9 f7       	brne	.-18     	; 0x20e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	7c 01       	movw	r14, r24
 236:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 238:	11 0f       	add	r17, r17
 23a:	11 0f       	add	r17, r17
 23c:	11 0f       	add	r17, r17
 23e:	10 64       	ori	r17, 0x40	; 64
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 244:	f7 01       	movw	r30, r14
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 24c:	81 2f       	mov	r24, r17
 24e:	8c 0f       	add	r24, r28
 250:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendChar(pcc);
 254:	80 2f       	mov	r24, r16
 256:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	c8 30       	cpi	r28, 0x08	; 8
 25e:	d1 05       	cpc	r29, r1
 260:	89 f7       	brne	.-30     	; 0x244 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	9a ee       	ldi	r25, 0xEA	; 234
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 27e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
 280:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 282:	87 b1       	in	r24, 0x07	; 7
 284:	80 6f       	ori	r24, 0xF0	; 240
 286:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	87 60       	ori	r24, 0x07	; 7
 28c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 292:	42 9a       	sbi	0x08, 2	; 8
 294:	20 e4       	ldi	r18, 0x40	; 64
 296:	3f e1       	ldi	r19, 0x1F	; 31
 298:	f9 01       	movw	r30, r18
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 29e:	42 98       	cbi	0x08, 2	; 8
 2a0:	f9 01       	movw	r30, r18
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2a6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2a8:	42 9a       	sbi	0x08, 2	; 8
 2aa:	c9 01       	movw	r24, r18
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2b0:	42 98       	cbi	0x08, 2	; 8
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2bc:	42 9a       	sbi	0x08, 2	; 8
 2be:	c9 01       	movw	r24, r18
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
 2c4:	42 98       	cbi	0x08, 2	; 8
 2c6:	c9 01       	movw	r24, r18
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
 2d8:	cc e8       	ldi	r28, 0x8C	; 140
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2de:	16 2f       	mov	r17, r22
 2e0:	1f 5f       	subi	r17, 0xFF	; 255
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 14 01 	call	0x228	; 0x228 <LCDdefinechar>
 2e8:	28 96       	adiw	r28, 0x08	; 8
 2ea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2ec:	18 30       	cpi	r17, 0x08	; 8
 2ee:	b9 f7       	brne	.-18     	; 0x2de <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	08 2f       	mov	r16, r24
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	04 c0       	rjmp	.+8      	; 0x30a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	10 17       	cp	r17, r16
 30c:	d0 f3       	brcs	.-12     	; 0x302 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	08 2f       	mov	r16, r24
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	10 17       	cp	r17, r16
 328:	d0 f3       	brcs	.-12     	; 0x31e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 336:	08 95       	ret

00000338 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 33e:	08 95       	ret

00000340 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 346:	08 95       	ret

00000348 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 34e:	08 95       	ret

00000350 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
}
 356:	08 95       	ret

00000358 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	08 2f       	mov	r16, r24
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	04 c0       	rjmp	.+8      	; 0x36a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 368:	1f 5f       	subi	r17, 0xFF	; 255
 36a:	10 17       	cp	r17, r16
 36c:	d0 f3       	brcs	.-12     	; 0x362 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	08 2f       	mov	r16, r24
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	04 c0       	rjmp	.+8      	; 0x386 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 37e:	84 e1       	ldi	r24, 0x14	; 20
 380:	0e 94 b4 00 	call	0x168	; 0x168 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 384:	1f 5f       	subi	r17, 0xFF	; 255
 386:	10 17       	cp	r17, r16
 388:	d0 f3       	brcs	.-12     	; 0x37e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3a0:	96 e0       	ldi	r25, 0x06	; 6
 3a2:	89 9f       	mul	r24, r25
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	24 2f       	mov	r18, r20
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	ac 01       	movw	r20, r24
 3ae:	42 9f       	mul	r20, r18
 3b0:	c0 01       	movw	r24, r0
 3b2:	43 9f       	mul	r20, r19
 3b4:	90 0d       	add	r25, r0
 3b6:	52 9f       	mul	r21, r18
 3b8:	90 0d       	add	r25, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divmodhi4>
 3c2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3c4:	cb 01       	movw	r24, r22
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodhi4>
 3ce:	e8 2e       	mov	r14, r24
 3d0:	ff 24       	eor	r15, r15
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3d8:	c8 01       	movw	r24, r16
 3da:	05 96       	adiw	r24, 0x05	; 5
 3dc:	c8 17       	cp	r28, r24
 3de:	d9 07       	cpc	r29, r25
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <LCDprogressBar+0x56>
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3e6:	c0 17       	cp	r28, r16
 3e8:	d1 07       	cpc	r29, r17
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <LCDprogressBar+0x60>
 3ec:	8e 2d       	mov	r24, r14
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCDprogressBar+0x62>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3f2:	0e 94 93 00 	call	0x126	; 0x126 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3f6:	f3 94       	inc	r15
 3f8:	0a 5f       	subi	r16, 0xFA	; 250
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	fd 14       	cp	r15, r13
 3fe:	60 f3       	brcs	.-40     	; 0x3d8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	08 95       	ret

00000410 <blinkLED>:
}

void blinkLED(void) 
{
	// blink the onboard LED
	PORTD ^= 0x04;
 410:	8b b1       	in	r24, 0x0b	; 11
 412:	94 e0       	ldi	r25, 0x04	; 4
 414:	89 27       	eor	r24, r25
 416:	8b b9       	out	0x0b, r24	; 11
}
 418:	08 95       	ret

0000041a <__vector_16>:

//Timer 0 overflow ISR
ISR (TIMER0_COMPA_vect) 
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
  if (time1>0)	--time1;
 426:	80 91 16 01 	lds	r24, 0x0116
 42a:	88 23       	and	r24, r24
 42c:	29 f0       	breq	.+10     	; 0x438 <__vector_16+0x1e>
 42e:	80 91 16 01 	lds	r24, 0x0116
 432:	81 50       	subi	r24, 0x01	; 1
 434:	80 93 16 01 	sts	0x0116, r24
}
 438:	8f 91       	pop	r24
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_12>:
//Timer 1 capture ISR
ISR (TIMER1_CAPT_vect) 
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
}

void blinkLED(void) 
{
	// blink the onboard LED
	PORTD ^= 0x04;
 452:	8b b1       	in	r24, 0x0b	; 11
 454:	94 e0       	ldi	r25, 0x04	; 4
 456:	89 27       	eor	r24, r25
 458:	8b b9       	out	0x0b, r24	; 11
}
//Timer 1 capture ISR
ISR (TIMER1_CAPT_vect) 
{
	blinkLED();
	T1capture = ICR1;
 45a:	80 91 86 00 	lds	r24, 0x0086
 45e:	90 91 87 00 	lds	r25, 0x0087
 462:	90 93 18 01 	sts	0x0118, r25
 466:	80 93 17 01 	sts	0x0117, r24
	
}
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <init_lcd>:
	sei();
}

void init_lcd(void) 
{
	LCDinit();				//initialize the display
 478:	0e 94 38 01 	call	0x270	; 0x270 <LCDinit>
	LCDcursorOFF();
 47c:	0e 94 a0 01 	call	0x340	; 0x340 <LCDcursorOFF>
	LCDclr();				//clear the display
 480:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>
	LCDGotoXY(0,0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
 48c:	8c ec       	ldi	r24, 0xCC	; 204
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>
}
 498:	08 95       	ret

0000049a <initialize>:
	}
	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
}
void initialize(void) 
{
	TCCR0A = (1<<WGM01);	      // Set WGM bits to 010 to set desired mode (CTC mode, pg. 106)
 49a:	92 e0       	ldi	r25, 0x02	; 2
 49c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // Bits 0 and 1. Set timer 0 prescaler to 64
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); 		  // Bit 1: Enable compare match for timer0 interrupts
 4a2:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;				  // Set the compare register to 250 time ticks
 4a6:	89 ef       	ldi	r24, 0xF9	; 249
 4a8:	87 bd       	out	0x27, r24	; 39
	
	// Set up timer1 for full speed
	TCCR1B = (1<<ICES1)|(1<<CS00);  // Set capture to positive edge, and set timer1 for full speed
 4aa:	81 e4       	ldi	r24, 0x41	; 65
 4ac:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<ICIE1);            // Turn on timer1 interrupt-on-capture
 4b0:	90 e2       	ldi	r25, 0x20	; 32
 4b2:	90 93 6f 00 	sts	0x006F, r25


	ACSR = (1<<ACIC) ; 			// Set analog comp to connect to timer capture input
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	80 bf       	out	0x30, r24	; 48
	TIFR1 = (1<<ICF1);
 4ba:	96 bb       	out	0x16, r25	; 22
	DDRB = 0;          			// Comparator negative input is B.3
 4bc:	14 b8       	out	0x04, r1	; 4

	//LCD init
	init_lcd();
 4be:	0e 94 3c 02 	call	0x478	; 0x478 <init_lcd>
	LCDclr();
 4c2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCDclr>

	CopyStringtoLCD(LCD_number, 0, 0);
 4c6:	8d ed       	ldi	r24, 0xDD	; 221
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CopyStringtoLCD>
	T1capture = 0;
 4d2:	10 92 18 01 	sts	0x0118, r1
 4d6:	10 92 17 01 	sts	0x0117, r1

	//set up the ports
  	DDRD |= 0x04;  // and d.2 which runs another LED
 4da:	52 9a       	sbi	0x0a, 2	; 10
	sei();
 4dc:	78 94       	sei
}
 4de:	08 95       	ret

000004e0 <task1>:
	initialize();
	while(1){if (time1==0){time1=t1; task1();}}		
}

void task1(void)
{
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
	DDRB=(0<<DDB3);	// Port b.3 is an input
 4e4:	14 b8       	out	0x04, r1	; 4
	DDRB=(1<<DDB2); // and port b.2 is an output
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	84 b9       	out	0x04, r24	; 4
	
	if (T1capture > 100)
 4ea:	80 91 17 01 	lds	r24, 0x0117
 4ee:	90 91 18 01 	lds	r25, 0x0118
 4f2:	85 36       	cpi	r24, 0x65	; 101
 4f4:	91 05       	cpc	r25, r1
 4f6:	e8 f1       	brcs	.+122    	; 0x572 <task1+0x92>
	{
		//Compute Capacitance
		capacitance = (int)T1capture/(11207); //amount of time for charging capacitance to comparator switch
 4f8:	80 91 17 01 	lds	r24, 0x0117
 4fc:	90 91 18 01 	lds	r25, 0x0118
 500:	67 ec       	ldi	r22, 0xC7	; 199
 502:	7b e2       	ldi	r23, 0x2B	; 43
 504:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divmodhi4>
 508:	70 93 1a 01 	sts	0x011A, r23
 50c:	60 93 19 01 	sts	0x0119, r22
										  // Assuming R3/R3 + R4 ratio is 0.6 and the capicitance is between 1 nF and 100 nF
		//Update LCD	
		sprintf(lcd_buffer,"%-u",capacitance);
 510:	04 e0       	ldi	r16, 0x04	; 4
 512:	11 e0       	ldi	r17, 0x01	; 1
 514:	20 91 19 01 	lds	r18, 0x0119
 518:	30 91 1a 01 	lds	r19, 0x011A
 51c:	00 d0       	rcall	.+0      	; 0x51e <task1+0x3e>
 51e:	00 d0       	rcall	.+0      	; 0x520 <task1+0x40>
 520:	00 d0       	rcall	.+0      	; 0x522 <task1+0x42>
 522:	ed b7       	in	r30, 0x3d	; 61
 524:	fe b7       	in	r31, 0x3e	; 62
 526:	31 96       	adiw	r30, 0x01	; 1
 528:	ad b7       	in	r26, 0x3d	; 61
 52a:	be b7       	in	r27, 0x3e	; 62
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	1c 93       	st	X, r17
 530:	0e 93       	st	-X, r16
 532:	11 97       	sbiw	r26, 0x01	; 1
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	93 83       	std	Z+3, r25	; 0x03
 53a:	82 83       	std	Z+2, r24	; 0x02
 53c:	35 83       	std	Z+5, r19	; 0x05
 53e:	24 83       	std	Z+4, r18	; 0x04
 540:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sprintf>
		LCDGotoXY(4, 0);
 544:	8d b7       	in	r24, 0x3d	; 61
 546:	9e b7       	in	r25, 0x3e	; 62
 548:	06 96       	adiw	r24, 0x06	; 6
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	9e bf       	out	0x3e, r25	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	8d bf       	out	0x3d, r24	; 61
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDGotoXY>
	  	// display the count 
		LCDstring(lcd_buffer, strlen(lcd_buffer));	
 55c:	f8 01       	movw	r30, r16
 55e:	01 90       	ld	r0, Z+
 560:	00 20       	and	r0, r0
 562:	e9 f7       	brne	.-6      	; 0x55e <task1+0x7e>
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	e0 1b       	sub	r30, r16
 568:	f1 0b       	sbc	r31, r17
 56a:	c8 01       	movw	r24, r16
 56c:	6e 2f       	mov	r22, r30
 56e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDstring>
	}
	DDRB=(0<<DDB2); // Set port b.2 input to charge cap
 572:	14 b8       	out	0x04, r1	; 4
}
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <main>:

void initialize(void); // Set up the MCU


int main(void)
{
 57a:	1f 93       	push	r17
	initialize();
 57c:	0e 94 4d 02 	call	0x49a	; 0x49a <initialize>
	while(1){if (time1==0){time1=t1; task1();}}		
 580:	18 ec       	ldi	r17, 0xC8	; 200
 582:	80 91 16 01 	lds	r24, 0x0116
 586:	88 23       	and	r24, r24
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x8>
 58a:	10 93 16 01 	sts	0x0116, r17
 58e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <task1>
 592:	f7 cf       	rjmp	.-18     	; 0x582 <main+0x8>

00000594 <__udivmodhi4>:
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	51 e1       	ldi	r21, 0x11	; 17
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__udivmodhi4_ep>

0000059c <__udivmodhi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	a6 17       	cp	r26, r22
 5a2:	b7 07       	cpc	r27, r23
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__udivmodhi4_ep>
 5a6:	a6 1b       	sub	r26, r22
 5a8:	b7 0b       	sbc	r27, r23

000005aa <__udivmodhi4_ep>:
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	5a 95       	dec	r21
 5b0:	a9 f7       	brne	.-22     	; 0x59c <__udivmodhi4_loop>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	bc 01       	movw	r22, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	08 95       	ret

000005bc <__divmodhi4>:
 5bc:	97 fb       	bst	r25, 7
 5be:	09 2e       	mov	r0, r25
 5c0:	07 26       	eor	r0, r23
 5c2:	0a d0       	rcall	.+20     	; 0x5d8 <__divmodhi4_neg1>
 5c4:	77 fd       	sbrc	r23, 7
 5c6:	04 d0       	rcall	.+8      	; 0x5d0 <__divmodhi4_neg2>
 5c8:	e5 df       	rcall	.-54     	; 0x594 <__udivmodhi4>
 5ca:	06 d0       	rcall	.+12     	; 0x5d8 <__divmodhi4_neg1>
 5cc:	00 20       	and	r0, r0
 5ce:	1a f4       	brpl	.+6      	; 0x5d6 <__divmodhi4_exit>

000005d0 <__divmodhi4_neg2>:
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255

000005d6 <__divmodhi4_exit>:
 5d6:	08 95       	ret

000005d8 <__divmodhi4_neg1>:
 5d8:	f6 f7       	brtc	.-4      	; 0x5d6 <__divmodhi4_exit>
 5da:	90 95       	com	r25
 5dc:	81 95       	neg	r24
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <sprintf>:
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	2e 97       	sbiw	r28, 0x0e	; 14
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	0d 89       	ldd	r16, Y+21	; 0x15
 5fc:	1e 89       	ldd	r17, Y+22	; 0x16
 5fe:	86 e0       	ldi	r24, 0x06	; 6
 600:	8c 83       	std	Y+4, r24	; 0x04
 602:	1a 83       	std	Y+2, r17	; 0x02
 604:	09 83       	std	Y+1, r16	; 0x01
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	9f e7       	ldi	r25, 0x7F	; 127
 60a:	9e 83       	std	Y+6, r25	; 0x06
 60c:	8d 83       	std	Y+5, r24	; 0x05
 60e:	9e 01       	movw	r18, r28
 610:	27 5e       	subi	r18, 0xE7	; 231
 612:	3f 4f       	sbci	r19, 0xFF	; 255
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	6f 89       	ldd	r22, Y+23	; 0x17
 61a:	78 8d       	ldd	r23, Y+24	; 0x18
 61c:	a9 01       	movw	r20, r18
 61e:	0e 94 22 03 	call	0x644	; 0x644 <vfprintf>
 622:	2f 81       	ldd	r18, Y+7	; 0x07
 624:	38 85       	ldd	r19, Y+8	; 0x08
 626:	02 0f       	add	r16, r18
 628:	13 1f       	adc	r17, r19
 62a:	f8 01       	movw	r30, r16
 62c:	10 82       	st	Z, r1
 62e:	2e 96       	adiw	r28, 0x0e	; 14
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	cf 91       	pop	r28
 63c:	df 91       	pop	r29
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	08 95       	ret

00000644 <vfprintf>:
 644:	2f 92       	push	r2
 646:	3f 92       	push	r3
 648:	4f 92       	push	r4
 64a:	5f 92       	push	r5
 64c:	6f 92       	push	r6
 64e:	7f 92       	push	r7
 650:	8f 92       	push	r8
 652:	9f 92       	push	r9
 654:	af 92       	push	r10
 656:	bf 92       	push	r11
 658:	cf 92       	push	r12
 65a:	df 92       	push	r13
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	2b 97       	sbiw	r28, 0x0b	; 11
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	de bf       	out	0x3e, r29	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	cd bf       	out	0x3d, r28	; 61
 678:	3c 01       	movw	r6, r24
 67a:	2b 01       	movw	r4, r22
 67c:	5a 01       	movw	r10, r20
 67e:	fc 01       	movw	r30, r24
 680:	17 82       	std	Z+7, r1	; 0x07
 682:	16 82       	std	Z+6, r1	; 0x06
 684:	83 81       	ldd	r24, Z+3	; 0x03
 686:	81 fd       	sbrc	r24, 1
 688:	03 c0       	rjmp	.+6      	; 0x690 <vfprintf+0x4c>
 68a:	6f ef       	ldi	r22, 0xFF	; 255
 68c:	7f ef       	ldi	r23, 0xFF	; 255
 68e:	c6 c1       	rjmp	.+908    	; 0xa1c <vfprintf+0x3d8>
 690:	9a e0       	ldi	r25, 0x0A	; 10
 692:	89 2e       	mov	r8, r25
 694:	1e 01       	movw	r2, r28
 696:	08 94       	sec
 698:	21 1c       	adc	r2, r1
 69a:	31 1c       	adc	r3, r1
 69c:	f3 01       	movw	r30, r6
 69e:	23 81       	ldd	r18, Z+3	; 0x03
 6a0:	f2 01       	movw	r30, r4
 6a2:	23 fd       	sbrc	r18, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	23 ff       	sbrs	r18, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	2f 01       	movw	r4, r30
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <vfprintf+0x6e>
 6b0:	b2 c1       	rjmp	.+868    	; 0xa16 <vfprintf+0x3d2>
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <vfprintf+0x80>
 6b6:	23 fd       	sbrc	r18, 3
 6b8:	85 91       	lpm	r24, Z+
 6ba:	23 ff       	sbrs	r18, 3
 6bc:	81 91       	ld	r24, Z+
 6be:	2f 01       	movw	r4, r30
 6c0:	85 32       	cpi	r24, 0x25	; 37
 6c2:	29 f4       	brne	.+10     	; 0x6ce <vfprintf+0x8a>
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	b3 01       	movw	r22, r6
 6c8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 6cc:	e7 cf       	rjmp	.-50     	; 0x69c <vfprintf+0x58>
 6ce:	98 2f       	mov	r25, r24
 6d0:	ff 24       	eor	r15, r15
 6d2:	ee 24       	eor	r14, r14
 6d4:	99 24       	eor	r9, r9
 6d6:	ff e1       	ldi	r31, 0x1F	; 31
 6d8:	ff 15       	cp	r31, r15
 6da:	d0 f0       	brcs	.+52     	; 0x710 <vfprintf+0xcc>
 6dc:	9b 32       	cpi	r25, 0x2B	; 43
 6de:	69 f0       	breq	.+26     	; 0x6fa <vfprintf+0xb6>
 6e0:	9c 32       	cpi	r25, 0x2C	; 44
 6e2:	28 f4       	brcc	.+10     	; 0x6ee <vfprintf+0xaa>
 6e4:	90 32       	cpi	r25, 0x20	; 32
 6e6:	59 f0       	breq	.+22     	; 0x6fe <vfprintf+0xba>
 6e8:	93 32       	cpi	r25, 0x23	; 35
 6ea:	91 f4       	brne	.+36     	; 0x710 <vfprintf+0xcc>
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <vfprintf+0xc6>
 6ee:	9d 32       	cpi	r25, 0x2D	; 45
 6f0:	49 f0       	breq	.+18     	; 0x704 <vfprintf+0xc0>
 6f2:	90 33       	cpi	r25, 0x30	; 48
 6f4:	69 f4       	brne	.+26     	; 0x710 <vfprintf+0xcc>
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	24 c0       	rjmp	.+72     	; 0x742 <vfprintf+0xfe>
 6fa:	52 e0       	ldi	r21, 0x02	; 2
 6fc:	f5 2a       	or	r15, r21
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	f8 2a       	or	r15, r24
 702:	28 c0       	rjmp	.+80     	; 0x754 <vfprintf+0x110>
 704:	98 e0       	ldi	r25, 0x08	; 8
 706:	f9 2a       	or	r15, r25
 708:	25 c0       	rjmp	.+74     	; 0x754 <vfprintf+0x110>
 70a:	e0 e1       	ldi	r30, 0x10	; 16
 70c:	fe 2a       	or	r15, r30
 70e:	22 c0       	rjmp	.+68     	; 0x754 <vfprintf+0x110>
 710:	f7 fc       	sbrc	r15, 7
 712:	29 c0       	rjmp	.+82     	; 0x766 <vfprintf+0x122>
 714:	89 2f       	mov	r24, r25
 716:	80 53       	subi	r24, 0x30	; 48
 718:	8a 30       	cpi	r24, 0x0A	; 10
 71a:	70 f4       	brcc	.+28     	; 0x738 <vfprintf+0xf4>
 71c:	f6 fe       	sbrs	r15, 6
 71e:	05 c0       	rjmp	.+10     	; 0x72a <vfprintf+0xe6>
 720:	98 9c       	mul	r9, r8
 722:	90 2c       	mov	r9, r0
 724:	11 24       	eor	r1, r1
 726:	98 0e       	add	r9, r24
 728:	15 c0       	rjmp	.+42     	; 0x754 <vfprintf+0x110>
 72a:	e8 9c       	mul	r14, r8
 72c:	e0 2c       	mov	r14, r0
 72e:	11 24       	eor	r1, r1
 730:	e8 0e       	add	r14, r24
 732:	f0 e2       	ldi	r31, 0x20	; 32
 734:	ff 2a       	or	r15, r31
 736:	0e c0       	rjmp	.+28     	; 0x754 <vfprintf+0x110>
 738:	9e 32       	cpi	r25, 0x2E	; 46
 73a:	29 f4       	brne	.+10     	; 0x746 <vfprintf+0x102>
 73c:	f6 fc       	sbrc	r15, 6
 73e:	6b c1       	rjmp	.+726    	; 0xa16 <vfprintf+0x3d2>
 740:	40 e4       	ldi	r20, 0x40	; 64
 742:	f4 2a       	or	r15, r20
 744:	07 c0       	rjmp	.+14     	; 0x754 <vfprintf+0x110>
 746:	9c 36       	cpi	r25, 0x6C	; 108
 748:	19 f4       	brne	.+6      	; 0x750 <vfprintf+0x10c>
 74a:	50 e8       	ldi	r21, 0x80	; 128
 74c:	f5 2a       	or	r15, r21
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x110>
 750:	98 36       	cpi	r25, 0x68	; 104
 752:	49 f4       	brne	.+18     	; 0x766 <vfprintf+0x122>
 754:	f2 01       	movw	r30, r4
 756:	23 fd       	sbrc	r18, 3
 758:	95 91       	lpm	r25, Z+
 75a:	23 ff       	sbrs	r18, 3
 75c:	91 91       	ld	r25, Z+
 75e:	2f 01       	movw	r4, r30
 760:	99 23       	and	r25, r25
 762:	09 f0       	breq	.+2      	; 0x766 <vfprintf+0x122>
 764:	b8 cf       	rjmp	.-144    	; 0x6d6 <vfprintf+0x92>
 766:	89 2f       	mov	r24, r25
 768:	85 54       	subi	r24, 0x45	; 69
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	18 f0       	brcs	.+6      	; 0x774 <vfprintf+0x130>
 76e:	80 52       	subi	r24, 0x20	; 32
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	38 f4       	brcc	.+14     	; 0x782 <vfprintf+0x13e>
 774:	44 e0       	ldi	r20, 0x04	; 4
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	a4 0e       	add	r10, r20
 77a:	b5 1e       	adc	r11, r21
 77c:	5f e3       	ldi	r21, 0x3F	; 63
 77e:	59 83       	std	Y+1, r21	; 0x01
 780:	0f c0       	rjmp	.+30     	; 0x7a0 <vfprintf+0x15c>
 782:	93 36       	cpi	r25, 0x63	; 99
 784:	31 f0       	breq	.+12     	; 0x792 <vfprintf+0x14e>
 786:	93 37       	cpi	r25, 0x73	; 115
 788:	79 f0       	breq	.+30     	; 0x7a8 <vfprintf+0x164>
 78a:	93 35       	cpi	r25, 0x53	; 83
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x14c>
 78e:	56 c0       	rjmp	.+172    	; 0x83c <vfprintf+0x1f8>
 790:	20 c0       	rjmp	.+64     	; 0x7d2 <vfprintf+0x18e>
 792:	f5 01       	movw	r30, r10
 794:	80 81       	ld	r24, Z
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	42 e0       	ldi	r20, 0x02	; 2
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	a4 0e       	add	r10, r20
 79e:	b5 1e       	adc	r11, r21
 7a0:	61 01       	movw	r12, r2
 7a2:	01 e0       	ldi	r16, 0x01	; 1
 7a4:	10 e0       	ldi	r17, 0x00	; 0
 7a6:	12 c0       	rjmp	.+36     	; 0x7cc <vfprintf+0x188>
 7a8:	f5 01       	movw	r30, r10
 7aa:	c0 80       	ld	r12, Z
 7ac:	d1 80       	ldd	r13, Z+1	; 0x01
 7ae:	f6 fc       	sbrc	r15, 6
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x174>
 7b2:	6f ef       	ldi	r22, 0xFF	; 255
 7b4:	7f ef       	ldi	r23, 0xFF	; 255
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x178>
 7b8:	69 2d       	mov	r22, r9
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	42 e0       	ldi	r20, 0x02	; 2
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	a4 0e       	add	r10, r20
 7c2:	b5 1e       	adc	r11, r21
 7c4:	c6 01       	movw	r24, r12
 7c6:	0e 94 33 05 	call	0xa66	; 0xa66 <strnlen>
 7ca:	8c 01       	movw	r16, r24
 7cc:	5f e7       	ldi	r21, 0x7F	; 127
 7ce:	f5 22       	and	r15, r21
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <vfprintf+0x1b6>
 7d2:	f5 01       	movw	r30, r10
 7d4:	c0 80       	ld	r12, Z
 7d6:	d1 80       	ldd	r13, Z+1	; 0x01
 7d8:	f6 fc       	sbrc	r15, 6
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <vfprintf+0x19e>
 7dc:	6f ef       	ldi	r22, 0xFF	; 255
 7de:	7f ef       	ldi	r23, 0xFF	; 255
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x1a2>
 7e2:	69 2d       	mov	r22, r9
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	42 e0       	ldi	r20, 0x02	; 2
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	a4 0e       	add	r10, r20
 7ec:	b5 1e       	adc	r11, r21
 7ee:	c6 01       	movw	r24, r12
 7f0:	0e 94 28 05 	call	0xa50	; 0xa50 <strnlen_P>
 7f4:	8c 01       	movw	r16, r24
 7f6:	50 e8       	ldi	r21, 0x80	; 128
 7f8:	f5 2a       	or	r15, r21
 7fa:	f3 fe       	sbrs	r15, 3
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <vfprintf+0x1c8>
 7fe:	1a c0       	rjmp	.+52     	; 0x834 <vfprintf+0x1f0>
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	b3 01       	movw	r22, r6
 806:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 80a:	ea 94       	dec	r14
 80c:	8e 2d       	mov	r24, r14
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	08 17       	cp	r16, r24
 812:	19 07       	cpc	r17, r25
 814:	a8 f3       	brcs	.-22     	; 0x800 <vfprintf+0x1bc>
 816:	0e c0       	rjmp	.+28     	; 0x834 <vfprintf+0x1f0>
 818:	f6 01       	movw	r30, r12
 81a:	f7 fc       	sbrc	r15, 7
 81c:	85 91       	lpm	r24, Z+
 81e:	f7 fe       	sbrs	r15, 7
 820:	81 91       	ld	r24, Z+
 822:	6f 01       	movw	r12, r30
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	b3 01       	movw	r22, r6
 828:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 82c:	e1 10       	cpse	r14, r1
 82e:	ea 94       	dec	r14
 830:	01 50       	subi	r16, 0x01	; 1
 832:	10 40       	sbci	r17, 0x00	; 0
 834:	01 15       	cp	r16, r1
 836:	11 05       	cpc	r17, r1
 838:	79 f7       	brne	.-34     	; 0x818 <vfprintf+0x1d4>
 83a:	ea c0       	rjmp	.+468    	; 0xa10 <vfprintf+0x3cc>
 83c:	94 36       	cpi	r25, 0x64	; 100
 83e:	11 f0       	breq	.+4      	; 0x844 <vfprintf+0x200>
 840:	99 36       	cpi	r25, 0x69	; 105
 842:	69 f5       	brne	.+90     	; 0x89e <vfprintf+0x25a>
 844:	f7 fe       	sbrs	r15, 7
 846:	08 c0       	rjmp	.+16     	; 0x858 <vfprintf+0x214>
 848:	f5 01       	movw	r30, r10
 84a:	20 81       	ld	r18, Z
 84c:	31 81       	ldd	r19, Z+1	; 0x01
 84e:	42 81       	ldd	r20, Z+2	; 0x02
 850:	53 81       	ldd	r21, Z+3	; 0x03
 852:	84 e0       	ldi	r24, 0x04	; 4
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0a c0       	rjmp	.+20     	; 0x86c <vfprintf+0x228>
 858:	f5 01       	movw	r30, r10
 85a:	80 81       	ld	r24, Z
 85c:	91 81       	ldd	r25, Z+1	; 0x01
 85e:	9c 01       	movw	r18, r24
 860:	44 27       	eor	r20, r20
 862:	37 fd       	sbrc	r19, 7
 864:	40 95       	com	r20
 866:	54 2f       	mov	r21, r20
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	a8 0e       	add	r10, r24
 86e:	b9 1e       	adc	r11, r25
 870:	9f e6       	ldi	r25, 0x6F	; 111
 872:	f9 22       	and	r15, r25
 874:	57 ff       	sbrs	r21, 7
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x246>
 878:	50 95       	com	r21
 87a:	40 95       	com	r20
 87c:	30 95       	com	r19
 87e:	21 95       	neg	r18
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	4f 4f       	sbci	r20, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	e0 e8       	ldi	r30, 0x80	; 128
 888:	fe 2a       	or	r15, r30
 88a:	ca 01       	movw	r24, r20
 88c:	b9 01       	movw	r22, r18
 88e:	a1 01       	movw	r20, r2
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	0e 94 6a 05 	call	0xad4	; 0xad4 <__ultoa_invert>
 898:	d8 2e       	mov	r13, r24
 89a:	d2 18       	sub	r13, r2
 89c:	40 c0       	rjmp	.+128    	; 0x91e <vfprintf+0x2da>
 89e:	95 37       	cpi	r25, 0x75	; 117
 8a0:	29 f4       	brne	.+10     	; 0x8ac <vfprintf+0x268>
 8a2:	1f 2d       	mov	r17, r15
 8a4:	1f 7e       	andi	r17, 0xEF	; 239
 8a6:	2a e0       	ldi	r18, 0x0A	; 10
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <vfprintf+0x2a2>
 8ac:	1f 2d       	mov	r17, r15
 8ae:	19 7f       	andi	r17, 0xF9	; 249
 8b0:	9f 36       	cpi	r25, 0x6F	; 111
 8b2:	61 f0       	breq	.+24     	; 0x8cc <vfprintf+0x288>
 8b4:	90 37       	cpi	r25, 0x70	; 112
 8b6:	20 f4       	brcc	.+8      	; 0x8c0 <vfprintf+0x27c>
 8b8:	98 35       	cpi	r25, 0x58	; 88
 8ba:	09 f0       	breq	.+2      	; 0x8be <vfprintf+0x27a>
 8bc:	ac c0       	rjmp	.+344    	; 0xa16 <vfprintf+0x3d2>
 8be:	0f c0       	rjmp	.+30     	; 0x8de <vfprintf+0x29a>
 8c0:	90 37       	cpi	r25, 0x70	; 112
 8c2:	39 f0       	breq	.+14     	; 0x8d2 <vfprintf+0x28e>
 8c4:	98 37       	cpi	r25, 0x78	; 120
 8c6:	09 f0       	breq	.+2      	; 0x8ca <vfprintf+0x286>
 8c8:	a6 c0       	rjmp	.+332    	; 0xa16 <vfprintf+0x3d2>
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <vfprintf+0x290>
 8cc:	28 e0       	ldi	r18, 0x08	; 8
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <vfprintf+0x2a2>
 8d2:	10 61       	ori	r17, 0x10	; 16
 8d4:	14 fd       	sbrc	r17, 4
 8d6:	14 60       	ori	r17, 0x04	; 4
 8d8:	20 e1       	ldi	r18, 0x10	; 16
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <vfprintf+0x2a2>
 8de:	14 fd       	sbrc	r17, 4
 8e0:	16 60       	ori	r17, 0x06	; 6
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	32 e0       	ldi	r19, 0x02	; 2
 8e6:	17 ff       	sbrs	r17, 7
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <vfprintf+0x2b6>
 8ea:	f5 01       	movw	r30, r10
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	44 e0       	ldi	r20, 0x04	; 4
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <vfprintf+0x2c6>
 8fa:	f5 01       	movw	r30, r10
 8fc:	80 81       	ld	r24, Z
 8fe:	91 81       	ldd	r25, Z+1	; 0x01
 900:	bc 01       	movw	r22, r24
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	42 e0       	ldi	r20, 0x02	; 2
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	a4 0e       	add	r10, r20
 90c:	b5 1e       	adc	r11, r21
 90e:	a1 01       	movw	r20, r2
 910:	0e 94 6a 05 	call	0xad4	; 0xad4 <__ultoa_invert>
 914:	d8 2e       	mov	r13, r24
 916:	d2 18       	sub	r13, r2
 918:	8f e7       	ldi	r24, 0x7F	; 127
 91a:	f8 2e       	mov	r15, r24
 91c:	f1 22       	and	r15, r17
 91e:	f6 fe       	sbrs	r15, 6
 920:	0b c0       	rjmp	.+22     	; 0x938 <vfprintf+0x2f4>
 922:	5e ef       	ldi	r21, 0xFE	; 254
 924:	f5 22       	and	r15, r21
 926:	d9 14       	cp	r13, r9
 928:	38 f4       	brcc	.+14     	; 0x938 <vfprintf+0x2f4>
 92a:	f4 fe       	sbrs	r15, 4
 92c:	07 c0       	rjmp	.+14     	; 0x93c <vfprintf+0x2f8>
 92e:	f2 fc       	sbrc	r15, 2
 930:	05 c0       	rjmp	.+10     	; 0x93c <vfprintf+0x2f8>
 932:	8f ee       	ldi	r24, 0xEF	; 239
 934:	f8 22       	and	r15, r24
 936:	02 c0       	rjmp	.+4      	; 0x93c <vfprintf+0x2f8>
 938:	1d 2d       	mov	r17, r13
 93a:	01 c0       	rjmp	.+2      	; 0x93e <vfprintf+0x2fa>
 93c:	19 2d       	mov	r17, r9
 93e:	f4 fe       	sbrs	r15, 4
 940:	0d c0       	rjmp	.+26     	; 0x95c <vfprintf+0x318>
 942:	fe 01       	movw	r30, r28
 944:	ed 0d       	add	r30, r13
 946:	f1 1d       	adc	r31, r1
 948:	80 81       	ld	r24, Z
 94a:	80 33       	cpi	r24, 0x30	; 48
 94c:	19 f4       	brne	.+6      	; 0x954 <vfprintf+0x310>
 94e:	99 ee       	ldi	r25, 0xE9	; 233
 950:	f9 22       	and	r15, r25
 952:	08 c0       	rjmp	.+16     	; 0x964 <vfprintf+0x320>
 954:	1f 5f       	subi	r17, 0xFF	; 255
 956:	f2 fe       	sbrs	r15, 2
 958:	05 c0       	rjmp	.+10     	; 0x964 <vfprintf+0x320>
 95a:	03 c0       	rjmp	.+6      	; 0x962 <vfprintf+0x31e>
 95c:	8f 2d       	mov	r24, r15
 95e:	86 78       	andi	r24, 0x86	; 134
 960:	09 f0       	breq	.+2      	; 0x964 <vfprintf+0x320>
 962:	1f 5f       	subi	r17, 0xFF	; 255
 964:	0f 2d       	mov	r16, r15
 966:	f3 fc       	sbrc	r15, 3
 968:	14 c0       	rjmp	.+40     	; 0x992 <vfprintf+0x34e>
 96a:	f0 fe       	sbrs	r15, 0
 96c:	0f c0       	rjmp	.+30     	; 0x98c <vfprintf+0x348>
 96e:	1e 15       	cp	r17, r14
 970:	10 f0       	brcs	.+4      	; 0x976 <vfprintf+0x332>
 972:	9d 2c       	mov	r9, r13
 974:	0b c0       	rjmp	.+22     	; 0x98c <vfprintf+0x348>
 976:	9d 2c       	mov	r9, r13
 978:	9e 0c       	add	r9, r14
 97a:	91 1a       	sub	r9, r17
 97c:	1e 2d       	mov	r17, r14
 97e:	06 c0       	rjmp	.+12     	; 0x98c <vfprintf+0x348>
 980:	80 e2       	ldi	r24, 0x20	; 32
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	b3 01       	movw	r22, r6
 986:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 98a:	1f 5f       	subi	r17, 0xFF	; 255
 98c:	1e 15       	cp	r17, r14
 98e:	c0 f3       	brcs	.-16     	; 0x980 <vfprintf+0x33c>
 990:	04 c0       	rjmp	.+8      	; 0x99a <vfprintf+0x356>
 992:	1e 15       	cp	r17, r14
 994:	10 f4       	brcc	.+4      	; 0x99a <vfprintf+0x356>
 996:	e1 1a       	sub	r14, r17
 998:	01 c0       	rjmp	.+2      	; 0x99c <vfprintf+0x358>
 99a:	ee 24       	eor	r14, r14
 99c:	04 ff       	sbrs	r16, 4
 99e:	0f c0       	rjmp	.+30     	; 0x9be <vfprintf+0x37a>
 9a0:	80 e3       	ldi	r24, 0x30	; 48
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	b3 01       	movw	r22, r6
 9a6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9aa:	02 ff       	sbrs	r16, 2
 9ac:	1d c0       	rjmp	.+58     	; 0x9e8 <vfprintf+0x3a4>
 9ae:	01 fd       	sbrc	r16, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x374>
 9b2:	88 e7       	ldi	r24, 0x78	; 120
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e c0       	rjmp	.+28     	; 0x9d4 <vfprintf+0x390>
 9b8:	88 e5       	ldi	r24, 0x58	; 88
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0b c0       	rjmp	.+22     	; 0x9d4 <vfprintf+0x390>
 9be:	80 2f       	mov	r24, r16
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	91 f0       	breq	.+36     	; 0x9e8 <vfprintf+0x3a4>
 9c4:	01 ff       	sbrs	r16, 1
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <vfprintf+0x388>
 9c8:	8b e2       	ldi	r24, 0x2B	; 43
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <vfprintf+0x38a>
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	f7 fc       	sbrc	r15, 7
 9d0:	8d e2       	ldi	r24, 0x2D	; 45
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b3 01       	movw	r22, r6
 9d6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <vfprintf+0x3a4>
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	b3 01       	movw	r22, r6
 9e2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9e6:	9a 94       	dec	r9
 9e8:	d9 14       	cp	r13, r9
 9ea:	c0 f3       	brcs	.-16     	; 0x9dc <vfprintf+0x398>
 9ec:	da 94       	dec	r13
 9ee:	f1 01       	movw	r30, r2
 9f0:	ed 0d       	add	r30, r13
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	b3 01       	movw	r22, r6
 9fa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 9fe:	dd 20       	and	r13, r13
 a00:	a9 f7       	brne	.-22     	; 0x9ec <vfprintf+0x3a8>
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <vfprintf+0x3cc>
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	b3 01       	movw	r22, r6
 a0a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <fputc>
 a0e:	ea 94       	dec	r14
 a10:	ee 20       	and	r14, r14
 a12:	c1 f7       	brne	.-16     	; 0xa04 <vfprintf+0x3c0>
 a14:	43 ce       	rjmp	.-890    	; 0x69c <vfprintf+0x58>
 a16:	f3 01       	movw	r30, r6
 a18:	66 81       	ldd	r22, Z+6	; 0x06
 a1a:	77 81       	ldd	r23, Z+7	; 0x07
 a1c:	cb 01       	movw	r24, r22
 a1e:	2b 96       	adiw	r28, 0x0b	; 11
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	f8 94       	cli
 a24:	de bf       	out	0x3e, r29	; 62
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	cd bf       	out	0x3d, r28	; 61
 a2a:	cf 91       	pop	r28
 a2c:	df 91       	pop	r29
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	df 90       	pop	r13
 a38:	cf 90       	pop	r12
 a3a:	bf 90       	pop	r11
 a3c:	af 90       	pop	r10
 a3e:	9f 90       	pop	r9
 a40:	8f 90       	pop	r8
 a42:	7f 90       	pop	r7
 a44:	6f 90       	pop	r6
 a46:	5f 90       	pop	r5
 a48:	4f 90       	pop	r4
 a4a:	3f 90       	pop	r3
 a4c:	2f 90       	pop	r2
 a4e:	08 95       	ret

00000a50 <strnlen_P>:
 a50:	fc 01       	movw	r30, r24
 a52:	05 90       	lpm	r0, Z+
 a54:	61 50       	subi	r22, 0x01	; 1
 a56:	70 40       	sbci	r23, 0x00	; 0
 a58:	01 10       	cpse	r0, r1
 a5a:	d8 f7       	brcc	.-10     	; 0xa52 <strnlen_P+0x2>
 a5c:	80 95       	com	r24
 a5e:	90 95       	com	r25
 a60:	8e 0f       	add	r24, r30
 a62:	9f 1f       	adc	r25, r31
 a64:	08 95       	ret

00000a66 <strnlen>:
 a66:	fc 01       	movw	r30, r24
 a68:	61 50       	subi	r22, 0x01	; 1
 a6a:	70 40       	sbci	r23, 0x00	; 0
 a6c:	01 90       	ld	r0, Z+
 a6e:	01 10       	cpse	r0, r1
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <strnlen+0x2>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	8e 0f       	add	r24, r30
 a78:	9f 1f       	adc	r25, r31
 a7a:	08 95       	ret

00000a7c <fputc>:
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	8c 01       	movw	r16, r24
 a86:	eb 01       	movw	r28, r22
 a88:	8b 81       	ldd	r24, Y+3	; 0x03
 a8a:	81 ff       	sbrs	r24, 1
 a8c:	1b c0       	rjmp	.+54     	; 0xac4 <fputc+0x48>
 a8e:	82 ff       	sbrs	r24, 2
 a90:	0d c0       	rjmp	.+26     	; 0xaac <fputc+0x30>
 a92:	2e 81       	ldd	r18, Y+6	; 0x06
 a94:	3f 81       	ldd	r19, Y+7	; 0x07
 a96:	8c 81       	ldd	r24, Y+4	; 0x04
 a98:	9d 81       	ldd	r25, Y+5	; 0x05
 a9a:	28 17       	cp	r18, r24
 a9c:	39 07       	cpc	r19, r25
 a9e:	64 f4       	brge	.+24     	; 0xab8 <fputc+0x3c>
 aa0:	e8 81       	ld	r30, Y
 aa2:	f9 81       	ldd	r31, Y+1	; 0x01
 aa4:	01 93       	st	Z+, r16
 aa6:	f9 83       	std	Y+1, r31	; 0x01
 aa8:	e8 83       	st	Y, r30
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <fputc+0x3c>
 aac:	e8 85       	ldd	r30, Y+8	; 0x08
 aae:	f9 85       	ldd	r31, Y+9	; 0x09
 ab0:	80 2f       	mov	r24, r16
 ab2:	09 95       	icall
 ab4:	89 2b       	or	r24, r25
 ab6:	31 f4       	brne	.+12     	; 0xac4 <fputc+0x48>
 ab8:	8e 81       	ldd	r24, Y+6	; 0x06
 aba:	9f 81       	ldd	r25, Y+7	; 0x07
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	9f 83       	std	Y+7, r25	; 0x07
 ac0:	8e 83       	std	Y+6, r24	; 0x06
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <fputc+0x4c>
 ac4:	0f ef       	ldi	r16, 0xFF	; 255
 ac6:	1f ef       	ldi	r17, 0xFF	; 255
 ac8:	c8 01       	movw	r24, r16
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <__ultoa_invert>:
 ad4:	fa 01       	movw	r30, r20
 ad6:	aa 27       	eor	r26, r26
 ad8:	28 30       	cpi	r18, 0x08	; 8
 ada:	51 f1       	breq	.+84     	; 0xb30 <__ultoa_invert+0x5c>
 adc:	20 31       	cpi	r18, 0x10	; 16
 ade:	81 f1       	breq	.+96     	; 0xb40 <__ultoa_invert+0x6c>
 ae0:	e8 94       	clt
 ae2:	6f 93       	push	r22
 ae4:	6e 7f       	andi	r22, 0xFE	; 254
 ae6:	6e 5f       	subi	r22, 0xFE	; 254
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	af 4f       	sbci	r26, 0xFF	; 255
 af0:	b1 e0       	ldi	r27, 0x01	; 1
 af2:	3e d0       	rcall	.+124    	; 0xb70 <__ultoa_invert+0x9c>
 af4:	b4 e0       	ldi	r27, 0x04	; 4
 af6:	3c d0       	rcall	.+120    	; 0xb70 <__ultoa_invert+0x9c>
 af8:	67 0f       	add	r22, r23
 afa:	78 1f       	adc	r23, r24
 afc:	89 1f       	adc	r24, r25
 afe:	9a 1f       	adc	r25, r26
 b00:	a1 1d       	adc	r26, r1
 b02:	68 0f       	add	r22, r24
 b04:	79 1f       	adc	r23, r25
 b06:	8a 1f       	adc	r24, r26
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	6a 0f       	add	r22, r26
 b0e:	71 1d       	adc	r23, r1
 b10:	81 1d       	adc	r24, r1
 b12:	91 1d       	adc	r25, r1
 b14:	a1 1d       	adc	r26, r1
 b16:	20 d0       	rcall	.+64     	; 0xb58 <__ultoa_invert+0x84>
 b18:	09 f4       	brne	.+2      	; 0xb1c <__ultoa_invert+0x48>
 b1a:	68 94       	set
 b1c:	3f 91       	pop	r19
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	26 9f       	mul	r18, r22
 b22:	11 24       	eor	r1, r1
 b24:	30 19       	sub	r19, r0
 b26:	30 5d       	subi	r19, 0xD0	; 208
 b28:	31 93       	st	Z+, r19
 b2a:	de f6       	brtc	.-74     	; 0xae2 <__ultoa_invert+0xe>
 b2c:	cf 01       	movw	r24, r30
 b2e:	08 95       	ret
 b30:	46 2f       	mov	r20, r22
 b32:	47 70       	andi	r20, 0x07	; 7
 b34:	40 5d       	subi	r20, 0xD0	; 208
 b36:	41 93       	st	Z+, r20
 b38:	b3 e0       	ldi	r27, 0x03	; 3
 b3a:	0f d0       	rcall	.+30     	; 0xb5a <__ultoa_invert+0x86>
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0x5c>
 b3e:	f6 cf       	rjmp	.-20     	; 0xb2c <__ultoa_invert+0x58>
 b40:	46 2f       	mov	r20, r22
 b42:	4f 70       	andi	r20, 0x0F	; 15
 b44:	40 5d       	subi	r20, 0xD0	; 208
 b46:	4a 33       	cpi	r20, 0x3A	; 58
 b48:	18 f0       	brcs	.+6      	; 0xb50 <__ultoa_invert+0x7c>
 b4a:	49 5d       	subi	r20, 0xD9	; 217
 b4c:	31 fd       	sbrc	r19, 1
 b4e:	40 52       	subi	r20, 0x20	; 32
 b50:	41 93       	st	Z+, r20
 b52:	02 d0       	rcall	.+4      	; 0xb58 <__ultoa_invert+0x84>
 b54:	a9 f7       	brne	.-22     	; 0xb40 <__ultoa_invert+0x6c>
 b56:	ea cf       	rjmp	.-44     	; 0xb2c <__ultoa_invert+0x58>
 b58:	b4 e0       	ldi	r27, 0x04	; 4
 b5a:	a6 95       	lsr	r26
 b5c:	97 95       	ror	r25
 b5e:	87 95       	ror	r24
 b60:	77 95       	ror	r23
 b62:	67 95       	ror	r22
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0x86>
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	61 05       	cpc	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	08 95       	ret
 b70:	9b 01       	movw	r18, r22
 b72:	ac 01       	movw	r20, r24
 b74:	0a 2e       	mov	r0, r26
 b76:	06 94       	lsr	r0
 b78:	57 95       	ror	r21
 b7a:	47 95       	ror	r20
 b7c:	37 95       	ror	r19
 b7e:	27 95       	ror	r18
 b80:	ba 95       	dec	r27
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__ultoa_invert+0xa2>
 b84:	62 0f       	add	r22, r18
 b86:	73 1f       	adc	r23, r19
 b88:	84 1f       	adc	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	a0 1d       	adc	r26, r0
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
